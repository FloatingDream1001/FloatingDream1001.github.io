<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>逆波兰计算器（上）</title>
      <link href="/posts/70f94a48.html"/>
      <url>/posts/70f94a48.html</url>
      
        <content type="html"><![CDATA[<span class="p center logo large">逆波兰计算器（上）</span><span class="p center small">栈——通过逆波兰计算式构建计算器</span><ul><li><p>输入一个逆波兰表达式(后缀表达式)，使用栈(Stack), 计算其结果</p></li><li><p>支持小括号和多位数整数，因为这里我们主要讲的是数据结构，因此计算器进行简化，只支持对<strong>整数</strong>的计算。</p></li></ul><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p><strong>已知后缀进行计算</strong></p><p>​ (3+4)×5-6 &#x3D;&gt;3 4 + 5 × 6 -</p><ol><li>从左至右扫描，将3和4压入堆栈；</li><li>遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；</li><li>将5入栈；</li><li>接下来是×运算符，因此弹出5和7，计算出7×5&#x3D;35，将35入栈；</li><li>将6入栈；</li><li>最后是-运算符，计算出35-6的值，即29，由此得出最终结果（下一个-顶部）</li></ol><h3 id="代码详解"><a href="#代码详解" class="headerlink" title="代码详解"></a>代码详解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolandNotation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="comment">//先定义一个逆波兰表达式</span></span><br><span class="line">        <span class="comment">//(3+4)*5-6 =&gt; 3 4 + 5 * 6 -</span></span><br><span class="line">        <span class="comment">//4*5-8+60+8/2=4 5 * 8 - 60 + 8 2 / +</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">suffixExpression</span> <span class="operator">=</span> <span class="string">&quot;4 5 * 8 - 60 + 8 2 / +&quot;</span>;</span><br><span class="line">        <span class="comment">//思路</span></span><br><span class="line">        <span class="comment">//1.先将“3 4 + 5 * 6 -”=&gt; 放入ArrayList</span></span><br><span class="line">        <span class="comment">//2. 将ArrayList 传递给一个方法，遍历ArrayList 配合栈完成计算</span></span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; reList = getListStrings ( suffixExpression );</span><br><span class="line">        System.out.println (<span class="string">&quot;reList=&quot;</span>+reList );</span><br><span class="line">        <span class="type">int</span> res=calculate ( reList );</span><br><span class="line">        System.out.println (<span class="string">&quot;运算结果为: &quot;</span>+res );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将一个逆波兰表达式，依次将数据和运算符放入到ArrayList中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getListStrings</span> <span class="params">( String suffixEpression )</span> &#123;</span><br><span class="line">        <span class="comment">//将suffixEpression分割</span></span><br><span class="line">        String[] spilt=suffixEpression.split ( <span class="string">&quot; &quot;</span> );  <span class="comment">//以空格来分割</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt; ( );</span><br><span class="line">        <span class="keyword">for</span> ( String element : spilt ) &#123;  <span class="comment">//将分割后的数依次循环</span></span><br><span class="line">            list.add( element );</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//完成对逆波兰表达式的运算</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 从左至右扫描，将3和4压入堆栈；</span></span><br><span class="line"><span class="comment">     * 2. 遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；</span></span><br><span class="line"><span class="comment">     * 3. 将5入栈；</span></span><br><span class="line"><span class="comment">     * 4. 接下来是×运算符，因此弹出5和7，计算出7×5=35，将35入栈；</span></span><br><span class="line"><span class="comment">     * 5. 将6入栈；</span></span><br><span class="line"><span class="comment">     * 6. 最后是-运算符，计算出35-6的值，即29，由此得出最终结果（下一个-顶部）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculate</span> <span class="params">( List&lt;String&gt; ls)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个栈</span></span><br><span class="line">        Stack&lt;String&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt; ( );</span><br><span class="line">        <span class="comment">//遍历ls</span></span><br><span class="line">        <span class="keyword">for</span> ( String s : ls ) &#123;</span><br><span class="line">            <span class="comment">//这里使用正则表达式来取多位数</span></span><br><span class="line">            <span class="keyword">if</span> ( s.matches (<span class="string">&quot;\\d+&quot;</span>  ) )&#123;<span class="comment">//匹配多位数  s.matches来匹配数字“\\d+&quot;(+)表示一到多</span></span><br><span class="line">                <span class="comment">//入栈</span></span><br><span class="line">                stack.push ( s );</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//栈中弹出两个数，并运算，计算结果在入栈</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> Integer.parseInt (stack.pop ( ));</span><br><span class="line">                <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> Integer.parseInt (stack.pop ( ));</span><br><span class="line">                <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> ( s.equals ( <span class="string">&quot;+&quot;</span> ) ) &#123;</span><br><span class="line">                    res = num1 + num2;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ( s.equals ( <span class="string">&quot;-&quot;</span> ) ) &#123;</span><br><span class="line">                    res = num1 - num2;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ( s.equals ( <span class="string">&quot;*&quot;</span> ) ) &#123;</span><br><span class="line">                    res = num1 * num2;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ( s.equals ( <span class="string">&quot;/&quot;</span> ) ) &#123;</span><br><span class="line">                    res = num1 / num2;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span> ( <span class="string">&quot;运算符完毕&quot;</span> );</span><br><span class="line">                &#125;</span><br><span class="line">                stack.push (  <span class="string">&quot;&quot;</span>+res );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后留在stack中的数据为运算结果</span></span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt (stack.pop ( ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><div class="hide-block"><button type="button" class="hide-button" style="background-color:  pick;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://cdn.staticaly.com/gh/FloatingDream1001/markdown_blog@main/2023/1/image-20230119232552897.png" alt="image-20230119232552897" style="zoom:67%;"></p></div></div>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀、中缀、后缀表达式</title>
      <link href="/posts/1c6d16c2.html"/>
      <url>/posts/1c6d16c2.html</url>
      
        <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><span class="p center logo large">前缀、中缀、后缀表达式</span><span class="p center small">栈——初始前缀、中缀、后缀</span><h2 id="前缀表达式"><a href="#前缀表达式" class="headerlink" title="前缀表达式"></a>前缀表达式</h2><p><strong>前缀表达式又称波兰式，前缀表达式的运算符位于操作数之前</strong></p><p>举例说明，（3+4）*5-6的前缀表达式就是- x + 3 4 5 6</p><h4 id="规则："><a href="#规则：" class="headerlink" title="规则："></a>规则：</h4><p><strong>从右至左</strong>扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（栈顶元素 和 次顶元素），并将结果入栈；重复上述过程直到表达式最左端，最后运算得出的值即为表达式的结果</p><h4 id="案例详解："><a href="#案例详解：" class="headerlink" title="案例详解："></a>案例详解：</h4><p><strong>例如: (3+4)×5-6 对应的前缀表达式就是 - × + 3 4 5 6 , 针对前缀表达式求值步骤如下:</strong></p><ol><li>从右至左扫描，将6、5、4、3压入堆栈</li><li>遇到+运算符，因此弹出3和4（3为栈顶元素，4为次顶元素），计算出3+4的值，得7，再将7入栈</li><li>接下来是×运算符，因此弹出7和5，计算出7×5&#x3D;35，将35入栈</li><li>最后是-运算符，计算出35-6的值，即29，由此得出最终结果（顶上-下一个）</li></ol><h2 id="中缀表达式"><a href="#中缀表达式" class="headerlink" title="中缀表达式"></a>中缀表达式</h2><ol><li><p>中缀表达式就是常见的运算表达式，如(3+4)×5-6</p></li><li><p>中缀表达式的求值是我们人最熟悉的，但是对计算机来说却不好操作，因此，在计算结果时，<strong>往往会将中缀表达式转成其它表达式来操作(一般转成后缀表达式.)</strong></p></li></ol><h2 id="后缀表达式"><a href="#后缀表达式" class="headerlink" title="后缀表达式"></a>后缀表达式</h2><ol><li><p>后缀表达式又称**逆波兰表达式,**与前缀表达式相似，只是运算符位于操作数之后</p></li><li><p>举例说明： (3+4)×5-6 对应的后缀表达式就是 3 4 + 5 × 6 –</p></li><li><p>在比如：</p><table><thead><tr><th>正常的表达式</th><th>逆波兰表达式</th></tr></thead><tbody><tr><td>a+b</td><td>a b +</td></tr><tr><td>a+(b-c)</td><td>a b c - +</td></tr><tr><td>a+(b-c)*d</td><td>a b c – d * +</td></tr><tr><td>a+d*(b-c)</td><td>a d b c - * +</td></tr><tr><td>a&#x3D;1+3</td><td>a 1 3 + &#x3D;</td></tr></tbody></table></li></ol><h4 id="规则：-1"><a href="#规则：-1" class="headerlink" title="规则："></a>规则：</h4><p><strong>从左至右</strong>扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（次顶元素 和 栈顶元素），并将结果入栈；重复上述过程直到表达式最右端，最后运算得出的值即为表达式的结果</p><h4 id="案例详解：-1"><a href="#案例详解：-1" class="headerlink" title="案例详解："></a>案例详解：</h4><p><strong>例如: (3+4)×5-6 对应的后缀表达式就是 3 4 + 5 × 6 - , 针对后缀表达式求值步骤如下:</strong></p><ol><li>从左至右扫描，将3和4压入堆栈；</li><li>遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；</li><li>将5入栈；</li><li>接下来是×运算符，因此弹出5和7，计算出7×5&#x3D;35，将35入栈；</li><li>将6入栈；</li><li>最后是-运算符，计算出35-6的值，即29，由此得出最终结果（下一个-顶部）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈的应用</title>
      <link href="/posts/bcd57b6.html"/>
      <url>/posts/bcd57b6.html</url>
      
        <content type="html"><![CDATA[<span class="p center logo large">栈实现综合计算器</span><span class="p center small">栈——使用栈完成计算一个表达式的结果</span><p><em><em>7</em> 2 * 2-5+1-5+3 -4？</em>*</p><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p><img src="https://cdn.staticaly.com/gh/FloatingDream1001/markdown_blog@main/2023/1/image-20230119000920072.png" alt="image-20230119000920072"></p><h3 id="栈的构建"><a href="#栈的构建" class="headerlink" title="栈的构建"></a>栈的构建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先创建一个栈</span></span><br><span class="line"><span class="comment">//定义一个ArrayStack2表示栈，需要扩展功能</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayStack2</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxSize;  <span class="comment">//栈的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] stack; <span class="comment">//  用数组模拟栈，数据就放到该数组中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> -<span class="number">1</span>;  <span class="comment">//top表示栈顶，初始化为-1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayStack2</span> <span class="params">( <span class="type">int</span> maxSize )</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">        stack = <span class="keyword">new</span> <span class="title class_">int</span>[ <span class="built_in">this</span>.maxSize ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//栈满</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == maxSize - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//栈空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入栈——push</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span> <span class="params">( <span class="type">int</span> value )</span> &#123;</span><br><span class="line">        <span class="comment">//先判断栈是否满</span></span><br><span class="line">        <span class="keyword">if</span> ( isFull ( ) ) &#123;</span><br><span class="line">            System.out.println ( <span class="string">&quot;栈满&quot;</span> );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        top++;</span><br><span class="line">        stack[ top ] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出栈——pop,将栈顶数据返回</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>  <span class="title function_">pop</span> <span class="params">( )</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( isEmpty ( ) ) &#123;</span><br><span class="line">            <span class="comment">//抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span> ( <span class="string">&quot;栈空，没有数据&quot;</span> );   <span class="comment">//运行异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> stack[ top ];</span><br><span class="line">        top--;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历栈,遍历时从栈顶到栈底</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span> <span class="params">( )</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( isEmpty ( ) ) &#123;</span><br><span class="line">            System.out.println (<span class="string">&quot;栈空没有数据~&quot;</span> );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> top ; i &gt;= <span class="number">0</span> ; i-- ) &#123;</span><br><span class="line">            System.out.printf ( <span class="string">&quot;stack[%d]=%d\n&quot;</span>,i,stack[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回运算附的优先级，优先级使用数字表示，数字越大，表示优先级越高</span></span><br><span class="line">    <span class="comment">//局限，目前的表达式只有+、-、*、/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">priority</span> <span class="params">( <span class="type">int</span> oper)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( oper == <span class="string">&#x27;*&#x27;</span> || oper == <span class="string">&#x27;/&#x27;</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( oper == <span class="string">&#x27;+&#x27;</span>|| oper == <span class="string">&#x27;-&#x27;</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是不是一个运算附</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOper</span> <span class="params">( <span class="type">char</span> oper )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> oper == <span class="string">&#x27;+&#x27;</span> || oper == <span class="string">&#x27;-&#x27;</span> || oper == <span class="string">&#x27;*&#x27;</span> || oper == <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算方法</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num1  最先弹出的数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num2  第二个弹出的数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oper  弹出的运算符</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  res 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">cal</span> <span class="params">( <span class="type">int</span> num1, <span class="type">int</span> num2, <span class="type">int</span> oper )</span> &#123;</span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>; <span class="comment">//res表示计算结果</span></span><br><span class="line">        <span class="keyword">switch</span> (oper)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                res = num1 + num2;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                res = num2 - num1;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                res = num2 * num1;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                res = num2 / num1;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以返回当前栈顶的值，单并不出栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack[ top ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例应用"><a href="#实例应用" class="headerlink" title="实例应用"></a>实例应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">expression</span> <span class="operator">=</span> <span class="string">&quot;7*2*2-5+1-5+3-4&quot;</span>;   <span class="comment">//中缀表达式</span></span><br><span class="line">        <span class="comment">//创建两个栈，数栈和符号栈</span></span><br><span class="line">        <span class="type">ArrayStack2</span> <span class="variable">numStack</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayStack2</span> ( <span class="number">10</span> );</span><br><span class="line">        <span class="type">ArrayStack2</span> <span class="variable">operStack</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayStack2</span> ( <span class="number">10</span> );</span><br><span class="line">        <span class="comment">//定义变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">//用于扫描</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oper</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> <span class="string">&#x27; &#x27;</span>;  <span class="comment">//将每次扫描的char保存到ch里</span></span><br><span class="line">        String keepnum=<span class="string">&quot;&quot;</span>;  <span class="comment">//多位数</span></span><br><span class="line">        <span class="comment">//开始while语句，循环扫描expression</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//依次得到expression的每一个字符</span></span><br><span class="line">            ch = expression.substring ( index, index + <span class="number">1</span> ).charAt ( <span class="number">0</span> );  <span class="comment">//取出一个字符串后，charAt取第一个字符</span></span><br><span class="line">            <span class="comment">//判断是否是数字还是字符，并做相应处理</span></span><br><span class="line">            <span class="keyword">if</span> ( operStack.isOper ( ch ) ) &#123;  <span class="comment">//如果是运算符</span></span><br><span class="line">                <span class="comment">//判断当前的符号栈是否为空</span></span><br><span class="line">                <span class="keyword">if</span> ( operStack.isEmpty ( ) ) &#123;</span><br><span class="line">                   <span class="comment">//直接入</span></span><br><span class="line">                    operStack.push ( ch );</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//判断优先级、</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//如果当前的优先级小于或者等于栈中的操作符</span></span><br><span class="line">                    <span class="comment">//就需要从数栈中pop出两个数在从符号栈中pop出一个符号，进行运算，</span></span><br><span class="line">                    <span class="comment">//将得到结果，入数栈，然后将当前的操作符入符号栈</span></span><br><span class="line">                    <span class="keyword">if</span> ( operStack.priority ( ch ) &lt;= operStack.priority ( operStack.peek ( ) ) ) &#123;</span><br><span class="line">                        num1 = numStack.pop ( );</span><br><span class="line">                        num2 = numStack.pop ( );</span><br><span class="line">                        oper=operStack.pop ( );</span><br><span class="line">                        res = numStack.cal ( num1, num2, oper );</span><br><span class="line">                        <span class="comment">//把运算的结果入数栈</span></span><br><span class="line">                        numStack.push ( res );</span><br><span class="line">                        <span class="comment">//然后把当前的符号入符号栈</span></span><br><span class="line">                        operStack.push ( ch  );</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//大于，直接入符号栈</span></span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        operStack.push ( ch );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;  <span class="comment">//数字直接入栈</span></span><br><span class="line">                <span class="comment">//numStack.push ( ch-48 );  // &#x27;1&#x27;=49 而真实是1</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//处理多位数时，不能的发现是一个数就入栈，有可能是多位数</span></span><br><span class="line">                <span class="comment">//在处理数时，需要向expression的表达式的index后在看一位，如果是数进行扫描，如果不是数就停止</span></span><br><span class="line">                <span class="comment">//因此我们需要定义一个字符串变量，用于拼接</span></span><br><span class="line"></span><br><span class="line">                keepnum+=ch;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断ch是否是最后一个</span></span><br><span class="line">                <span class="keyword">if</span> ( index==expression.length()-<span class="number">1</span>)&#123;</span><br><span class="line">                    numStack.push ( Integer.parseInt ( keepnum ) );</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//判断下一个字符是不是数字，如果是数字就继续扫描</span></span><br><span class="line">                    <span class="comment">//index本身值不变</span></span><br><span class="line">                    <span class="keyword">if</span> ( operStack.isOper ( expression.substring ( index + <span class="number">1</span>, index + <span class="number">2</span> ).charAt ( <span class="number">0</span> ) ) ) &#123;</span><br><span class="line">                        numStack.push ( Integer.parseInt ( keepnum ) );  <span class="comment">//Integer.parseInt ( keepnum )字符串转数字</span></span><br><span class="line">                        <span class="comment">//！！！重要 ,keepnum清空</span></span><br><span class="line">                        keepnum = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//让index+1，并判断是否到最后</span></span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">if</span> ( index &gt;= expression.length ( ) ) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当表达式扫描完毕，就顺序的从数栈和符号栈中pop出相应的数和符号，并运行</span></span><br><span class="line">        <span class="keyword">while</span> (!operStack.isEmpty ()) &#123;  <span class="comment">//通过符号栈来判断数栈</span></span><br><span class="line">            num1 = numStack.pop ( );</span><br><span class="line">            num2 = numStack.pop ( );</span><br><span class="line">            oper=operStack.pop ( );</span><br><span class="line">            res = numStack.cal ( num1, num2, oper );</span><br><span class="line">            numStack.push ( res );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//讲数栈的最后一个数pop出</span></span><br><span class="line">        System.out.printf (<span class="string">&quot;表达式 %s = %d&quot;</span>,expression,numStack.pop ( ));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stack入门</title>
      <link href="/posts/ecb08547.html"/>
      <url>/posts/ecb08547.html</url>
      
        <content type="html"><![CDATA[<span class="p center logo large">Stack</span><span class="p center small">数据结构——栈的快速入门</span><h3 id="栈的介绍"><a href="#栈的介绍" class="headerlink" title="栈的介绍"></a>栈的介绍</h3><ol><li><p>栈是一个<code>先入后出</code>(FILO-First In Last Out)的有序列表。</p></li><li><p>栈(stack)是限制线性表中元素的插入和删除<strong>只能在线性表的同一端</strong>进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，称为<strong>栈顶</strong>(Top)，另一端为固定的一 端，称为<strong>栈底</strong>(Bottom)。</p></li><li><p>根据栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈项，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除</p></li><li><p>图解方式说明出栈（pop)和入栈(push)</p></li></ol><p><img src="https://cdn.staticaly.com/gh/FloatingDream1001/markdown_blog@main/2023/1/image-20230117181009950.png" alt="image-20230117181009950"></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li>子程序的调用:在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。</li><li>处理递归调用:和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。</li><li>表达式的转换[中缀表达式转后缀表达式]与求值(实际解决)。</li><li>二叉树的遍历。</li><li>图形的深度优先(depth—first)搜索法。</li></ol><h3 id="栈的代码实现"><a href="#栈的代码实现" class="headerlink" title="栈的代码实现"></a>栈的代码实现</h3><h4 id="数组模拟栈"><a href="#数组模拟栈" class="headerlink" title="数组模拟栈"></a>数组模拟栈</h4><h5 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h5><p><img src="https://cdn.staticaly.com/gh/FloatingDream1001/markdown_blog@main/2023/1/image-20230117181553142.png" alt="image-20230117181553142"></p><ol><li><p>使用数组模拟栈</p></li><li><p>定义一个变量为top来表示栈顶，初始化为-1</p></li><li><p>入栈的操作，当有数据加入到栈时，top++，stack[top]&#x3D;data;</p></li><li><p>出栈的操作，int value&#x3D;stack[top];  top–;  return value;</p></li></ol><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个ArrayStack表示栈</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayStack</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxSize;  <span class="comment">//栈的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] stack; <span class="comment">//  用数组模拟栈，数据就放到该数组中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> -<span class="number">1</span>;  <span class="comment">//top表示栈顶，初始化为-1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayStack</span> <span class="params">( <span class="type">int</span> maxSize )</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">        stack = <span class="keyword">new</span> <span class="title class_">int</span>[ <span class="built_in">this</span>.maxSize ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//栈满</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == maxSize - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//栈空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入栈——push</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span> <span class="params">( <span class="type">int</span> value )</span> &#123;</span><br><span class="line">        <span class="comment">//先判断栈是否满</span></span><br><span class="line">        <span class="keyword">if</span> ( isFull ( ) ) &#123;</span><br><span class="line">            System.out.println ( <span class="string">&quot;栈满&quot;</span> );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        top++;</span><br><span class="line">        stack[ top ] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出栈——pop,将栈顶数据返回</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>  <span class="title function_">pop</span> <span class="params">( )</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( isEmpty ( ) ) &#123;</span><br><span class="line">            <span class="comment">//抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span> ( <span class="string">&quot;栈空，没有数据&quot;</span> );   <span class="comment">//运行异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> stack[ top ];</span><br><span class="line">        top--;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历栈,遍历时从栈顶到栈底</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span> <span class="params">( )</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( isEmpty ( ) ) &#123;</span><br><span class="line">            System.out.println (<span class="string">&quot;栈空没有数据~&quot;</span> );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> top ; i &gt;= <span class="number">0</span> ; i-- ) &#123;</span><br><span class="line">            System.out.printf ( <span class="string">&quot;stack[%d]=%d\n&quot;</span>,i,stack[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayStackDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="comment">//测试一下ArrayStack是否正确</span></span><br><span class="line">        <span class="comment">//先创建一个ArrayStack</span></span><br><span class="line">        <span class="type">ArrayStack</span> <span class="variable">stack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayStack</span> ( <span class="number">4</span> );</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;    <span class="comment">//控制是否退出菜单</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span> ( System.in );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            System.out.println (<span class="string">&quot;show,表示显示菜单&quot;</span> );</span><br><span class="line">            System.out.println (<span class="string">&quot;exit,表示退出菜单&quot;</span> );</span><br><span class="line">            System.out.println (<span class="string">&quot;push,表示添加数据到菜单（入栈）&quot;</span> );</span><br><span class="line">            System.out.println (<span class="string">&quot;pop,表示从栈中取出数据（出栈）&quot;</span> );</span><br><span class="line">            System.out.println ( <span class="string">&quot;请输入你的选择&quot;</span> );</span><br><span class="line">            key = sc.next ( );</span><br><span class="line">            <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;show&quot;</span>:</span><br><span class="line">                    stack.list ();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">                    sc.close ();</span><br><span class="line">                    loop = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;push&quot;</span>:</span><br><span class="line">                    System.out.println ( <span class="string">&quot;请输入一个数&quot;</span> );</span><br><span class="line">                    <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> sc.nextInt ( );</span><br><span class="line">                    stack.push ( value );</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;pop&quot;</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> stack.pop ( );</span><br><span class="line">                        System.out.printf ( <span class="string">&quot;出栈的数据是%d\n&quot;</span>, res );</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        System.out.println ( e.getMessage ());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println (<span class="string">&quot;程序退出&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链表模拟栈"><a href="#链表模拟栈" class="headerlink" title="链表模拟栈"></a>链表模拟栈</h4><ol><li><p>使用双链表</p></li><li><p>定义一个top表示栈顶，初始值为-1；</p></li><li><p>入栈的操作，当有数据加入到栈时，弄一个辅助节点，temp&#x3D;top,temp.next指向新节点;heroNode.pre &#x3D; temp;top&#x3D;heroNode</p></li><li><p>出栈的操作。当出栈时，top的节点出去，辅助节点temp&#x3D;top;temp.pre.next&#x3D;null; top&#x3D;temp.pre; temp.pre&#x3D;null;</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个双向链表的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoubleLinkList</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">HeroNode3</span> <span class="variable">top</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">HeroNode3</span>(-<span class="number">1</span>,<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">HeroNode3</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode3</span> ( <span class="number">0</span>, <span class="string">&quot;&quot;</span> );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DoubleLinkList</span> <span class="params">( <span class="type">int</span> maxSize )</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//栈满</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top.no == maxSize - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//栈空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top.no == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历双向链表</span></span><br><span class="line">    <span class="comment">//显示链表遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span> <span class="params">( )</span> &#123;</span><br><span class="line">        <span class="comment">//判断链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span> ( isEmpty ()) &#123;</span><br><span class="line">            System.out.println ( <span class="string">&quot;栈空没有数据&quot;</span> );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为头节点，不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class="line">        <span class="type">HeroNode3</span> <span class="variable">temp</span> <span class="operator">=</span> top;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//判断是否到链表最后</span></span><br><span class="line">            <span class="keyword">if</span> ( temp.no==-<span class="number">1</span> ) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出节点的信息</span></span><br><span class="line">            System.out.println ( temp );</span><br><span class="line">            <span class="comment">//将temp后移</span></span><br><span class="line">            temp = temp.pre;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span> <span class="params">( String value )</span> &#123;</span><br><span class="line">        <span class="comment">//先判断栈是否满</span></span><br><span class="line">        <span class="keyword">if</span> ( isFull ( ) ) &#123;</span><br><span class="line">            System.out.println ( <span class="string">&quot;栈满&quot;</span> );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HeroNode3</span> <span class="variable">heroNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode3</span> ( n++, value );</span><br><span class="line">        <span class="type">HeroNode3</span> <span class="variable">temp</span> <span class="operator">=</span> top;</span><br><span class="line"></span><br><span class="line">        temp.next    = heroNode;</span><br><span class="line">        heroNode.pre = temp;</span><br><span class="line">        top=heroNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HeroNode3 <span class="title function_">pop</span> <span class="params">( )</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( isEmpty ( ) ) &#123;</span><br><span class="line">            <span class="comment">//抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span> ( <span class="string">&quot;栈空，没有数据&quot;</span> );   <span class="comment">//运行异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        n--;</span><br><span class="line">        HeroNode3 temp=top;</span><br><span class="line">        temp.pre.next=<span class="literal">null</span>;</span><br><span class="line">        top = temp.pre;</span><br><span class="line">        temp.pre = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个heroNode,每个HeroNode 对象是一个节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> no;</span><br><span class="line">    <span class="keyword">public</span> String value;</span><br><span class="line">    <span class="keyword">public</span> HeroNode3 next;  <span class="comment">//指向后一个节点  默认为null</span></span><br><span class="line">    <span class="keyword">public</span> HeroNode3 pre;  <span class="comment">//指向前一个节点   默认为null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroNode3</span> <span class="params">( <span class="type">int</span> no, String value )</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no       = no;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了显示方便，我们重写toString</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span> <span class="params">( )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HeroNode3 [no=&quot;</span> + no + <span class="string">&quot;,value=&quot;</span> + value +  <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleListStackDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="type">DoubleLinkList</span> <span class="variable">stack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoubleLinkList</span> ( <span class="number">5</span> );</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="literal">true</span>;    <span class="comment">//控制是否退出菜单</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span> ( System.in );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            System.out.println (<span class="string">&quot;show,表示显示菜单&quot;</span> );</span><br><span class="line">            System.out.println (<span class="string">&quot;exit,表示退出菜单&quot;</span> );</span><br><span class="line">            System.out.println (<span class="string">&quot;push,表示添加数据到菜单（入栈）&quot;</span> );</span><br><span class="line">            System.out.println (<span class="string">&quot;pop,表示从栈中取出数据（出栈）&quot;</span> );</span><br><span class="line">            System.out.println ( <span class="string">&quot;请输入你的选择&quot;</span> );</span><br><span class="line">            key = sc.next ( );</span><br><span class="line">            <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;show&quot;</span>:</span><br><span class="line">                    stack.list ();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">                    sc.close ();</span><br><span class="line">                    loop = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;push&quot;</span>:</span><br><span class="line">                    System.out.println ( <span class="string">&quot;请输入一个值&quot;</span> );</span><br><span class="line">                    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> sc.next ( );</span><br><span class="line">                    stack.push ( value );</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;pop&quot;</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">HeroNode3</span> <span class="variable">res</span> <span class="operator">=</span> stack.pop ( );</span><br><span class="line">                        System.out.printf ( <span class="string">&quot;出栈的数据是%s\n&quot;</span>, res.value );</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        System.out.println ( e.getMessage ());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println (<span class="string">&quot;程序退出&quot;</span> );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单向环形列表的应用场景</title>
      <link href="/posts/3569883e.html"/>
      <url>/posts/3569883e.html</url>
      
        <content type="html"><![CDATA[<span class="p center logo large">约瑟夫问题</span><span class="p center small">数据结构——简单应用单链表</span><h2 id="约瑟夫问题"><a href="#约瑟夫问题" class="headerlink" title="约瑟夫问题"></a>约瑟夫问题</h2><p>Josephu 问题为: 设编号为1, 2, .. n的n个人围坐一圈，约定编号为k (1&lt;&#x3D;k&lt;&#x3D;n)的人从1开始报数，数到m的那个人出列，它的下一位又从1开始报数，数到m的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。</p><p>​<code>**提示**</code>: 用一个不带头结点的循环链表来处理Josephu问题: 先构成一个有 n个结点的单循环链表，然后由k结<br>点起从1开始计数，计到m时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从1开始计数，直<br>到最后一个结点从链表中删除算法结束。</p><hr><h3 id="单向环形链表"><a href="#单向环形链表" class="headerlink" title="单向环形链表"></a>单向环形链表</h3><img src="https://cdn.staticaly.com/gh/FloatingDream1001/markdown_blog@main/2023/1/image-20230116230614412.png" alt="image-20230116230614412" style="zoom:67%;"><h3 id="约瑟夫问题分析图"><a href="#约瑟夫问题分析图" class="headerlink" title="约瑟夫问题分析图"></a>约瑟夫问题分析图</h3><img src="https://cdn.staticaly.com/gh/FloatingDream1001/markdown_blog@main/2023/1/image-20230116230924680.png" alt="image-20230116230924680" style="zoom: 67%;"><h3 id="代码实现分析-："><a href="#代码实现分析-：" class="headerlink" title="代码实现分析 ："></a>代码实现<strong>分析</strong> ：</h3><ul><li><p>先创建一个单项环形链表</p><ol><li><p>先创建第一个节点，让first指向该节点，并形成环形</p></li><li><p>后边当我们每创建一个新的节点，就把该节点，加到已有的环形链表中即可</p></li></ol></li><li><p>遍历环形链表</p><ol><li><p>先让一个辅助指针（temp），指向first</p></li><li><p>然后通过一个while循环遍历该链表即可    ( <wavy>temp.next=first</wavy>)遍历结束</p>  <div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://cdn.staticaly.com/gh/FloatingDream1001/markdown_blog@main/2023/1/image-20230117170218531.png" alt="image-20230117170218531" style="zoom:67%;"></p></div></div></li></ol></li><li><p>生成小孩出圈的顺序</p><ol><li><p>先创建一个辅助指针（helper），让它指向环形链表的最后一个</p></li><li><p>报数前，先让first和helper移动到startNo</p></li><li><p>当小孩报数时，让first与helper同时移动m-1次</p></li><li><p>这时first指向的小孩出圈</p> <wavy>first=first.next</wavy> <wavy>helper.next=first</wavy></li><li><p>此时原来first指向的节点就会被回收</p>  <div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://cdn.staticaly.com/gh/FloatingDream1001/markdown_blog@main/2023/1/image-20230117170339763.png" alt="image-20230117170339763" style="zoom:67%;"></p></div></div></li></ol></li></ul><h3 id="创建节点的代码"><a href="#创建节点的代码" class="headerlink" title="创建节点的代码"></a>创建节点的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先创建一个Child类表示一个节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> no;</span><br><span class="line">    <span class="keyword">private</span> Child next;  <span class="comment">//指向下一个节点，默认null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Child</span> <span class="params">( <span class="type">int</span> no )</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNo</span> <span class="params">( )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNo</span> <span class="params">( <span class="type">int</span> no )</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Child <span class="title function_">getNext</span> <span class="params">( )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span> <span class="params">( Child next )</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建环形链表的代码"><a href="#创建环形链表的代码" class="headerlink" title="创建环形链表的代码"></a>创建环形链表的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个环形的单向链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CireSingleLinkedList</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个first节点，没有编号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Child</span> <span class="variable">first</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span> ( -<span class="number">1</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加小孩节点，构建一个环形链表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CreatChildList</span> <span class="params">( <span class="type">int</span> nums )</span> &#123;</span><br><span class="line">        <span class="comment">//对nums 进行数据校验</span></span><br><span class="line">        <span class="keyword">if</span> ( nums &lt; <span class="number">1</span> ) &#123;</span><br><span class="line">            System.out.println ( <span class="string">&quot;nums的值不正确&quot;</span> );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建环形链表</span></span><br><span class="line">        <span class="type">Child</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;   <span class="comment">//辅助指针，帮助构建环形指针</span></span><br><span class="line">        <span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> ; i &lt;= nums ; i++ ) &#123;</span><br><span class="line">            <span class="comment">//根据编号创建小孩节点</span></span><br><span class="line">            <span class="type">Child</span> <span class="variable">boy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span> ( i );</span><br><span class="line">            <span class="comment">//如果是第一个小孩</span></span><br><span class="line">            <span class="keyword">if</span> ( i == <span class="number">1</span> ) &#123;</span><br><span class="line">                first = boy;</span><br><span class="line">                first.setNext ( first );</span><br><span class="line">                temp = first;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                temp.setNext ( boy );<span class="comment">//把之前最的后辅助节点的next指向新加的</span></span><br><span class="line">                boy.setNext ( first );<span class="comment">//此时处在最后的节点的next指向first</span></span><br><span class="line">                temp = boy;  <span class="comment">//辅助节点往后移</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历环形链表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span> <span class="params">( )</span> &#123;</span><br><span class="line">        <span class="comment">//判断链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span> ( first == <span class="literal">null</span> ) &#123;</span><br><span class="line">            System.out.println ( <span class="string">&quot;链表为空，没有任何小孩\n&quot;</span> );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为first不能动，所以我们仍然使用一个辅助指针完成遍历</span></span><br><span class="line">        <span class="type">Child</span> <span class="variable">temp</span> <span class="operator">=</span> first;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;  <span class="comment">//满足条件说明已经是最后一个，遍历完毕</span></span><br><span class="line">            System.out.printf ( <span class="string">&quot;小孩的编号为%d\n&quot;</span>, temp.getNo ( ) );</span><br><span class="line">            <span class="keyword">if</span> ( temp.getNext ( ) == first ) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.getNext ( );<span class="comment">//后移</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小孩出圈顺序代码"><a href="#小孩出圈顺序代码" class="headerlink" title="小孩出圈顺序代码"></a>小孩出圈顺序代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//小孩出圈</span></span><br><span class="line"><span class="comment">//根据用户的输入，计算出小孩出圈的顺序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startNo  开始节点  ，表示从第几个小孩开始</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> countNum 每次数几下（m）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums     表示最初有几个人</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countBoy</span> <span class="params">( <span class="type">int</span> startNo, <span class="type">int</span> countNum, <span class="type">int</span> nums )</span> &#123;</span><br><span class="line">    <span class="comment">//先对数据进行校验</span></span><br><span class="line">    <span class="keyword">if</span> ( first == <span class="literal">null</span> || startNo &lt; <span class="number">1</span> || startNo &gt; nums ) &#123;</span><br><span class="line">        System.out.println ( <span class="string">&quot;参数输入有误，请从新输入&quot;</span> );</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//先创建一个辅助指针（helper），让它指向环形链表的最后一个</span></span><br><span class="line">    <span class="type">Child</span> <span class="variable">helper</span> <span class="operator">=</span> first;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( helper.getNext ( ) == first ) &#123;  <span class="comment">//说明helper指向最后一个节点</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        helper = helper.getNext ( );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//先将first移动到startNo节点</span></span><br><span class="line">    <span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span> ; j &lt; startNo - <span class="number">1</span> ; j++ ) &#123;</span><br><span class="line">        first=first.getNext ( );</span><br><span class="line">        helper = helper.getNext ( );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当小孩报数时，让first与helper同时移动m-1次,然后出圈</span></span><br><span class="line">    <span class="comment">//这里是一个循环操作，直到圈中只有一个节点</span></span><br><span class="line">    <span class="keyword">while</span> (helper!=first) &#123;   <span class="comment">//helper==first(helper.getnext()==helper)说明圈中只有一个节点</span></span><br><span class="line">        <span class="comment">//让first与helper同时移动countNum-1次</span></span><br><span class="line">        <span class="keyword">for</span> ( <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span> ; j &lt; countNum - <span class="number">1</span> ; j++ ) &#123;</span><br><span class="line">            first=first.getNext ( );</span><br><span class="line">            helper = helper.getNext ( );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此时first指向的节点是要出圈的小孩</span></span><br><span class="line">        System.out.printf ( <span class="string">&quot;小孩%d出圈\n&quot;</span>, first.getNo ( ) );</span><br><span class="line">        <span class="comment">//将此时first指向的小孩弄出圈</span></span><br><span class="line">        first = first.getNext ( );</span><br><span class="line">        helper.setNext ( first );</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.printf ( <span class="string">&quot;最后留在圈中的小孩编号%d\n&quot;</span>,first.getNo () );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LinkList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DoubleLinkList</title>
      <link href="/posts/b0ed8996.html"/>
      <url>/posts/b0ed8996.html</url>
      
        <content type="html"><![CDATA[<span class="p center logo large">双链表</span><span class="p center small">数据结构——学习双链表</span><blockquote><p>单项链表与双向链表对比</p><blockquote><p>单向链表，查找的方向只能是一个方向，而双向链表可以向前或者向后查找</p><p>单项链表不能自我删除，需要靠辅助节点，找到一个temp，temp是待删除节点的前一个节点。双向链表，则可以自我删除。</p></blockquote></blockquote><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://cdn.staticaly.com/gh/FloatingDream1001/markdown_blog@main/2023/1/image-20230113224105760.png" alt="image (1)" style="zoom:67%;"></p></div></div><p><em>相对于单项链表,双向链表增加了pre,来指向前一个节点,从而达到双向</em></p><hr><h3 id="增删改查分析"><a href="#增删改查分析" class="headerlink" title="增删改查分析"></a>增删改查分析</h3><p>分析 :双向链表的遍历,增加,删除,修改的操作思路</p><ul><li><strong>遍历</strong> :和单链表一样,不光可以向前查找,也可以向后</li><li><strong>添加</strong> :(默认添加到链表最后)<ul><li><p>先找到双向链表的最后节点</p></li><li><p>temp.next&#x3D;newHeroNode</p></li><li><p>newHeroNode.pre&#x3D;temp</p></li></ul></li><li><strong>修改</strong> :的思路和原理与单链表一样(通过遍历找到节点的.no然后改data值)</li><li><strong>删除</strong><ul><li>因为是双向链表,因此可以自我删除,不需要找前后值</li><li>直接找到要删除的节点,比如temp</li><li>temp.pre.next&#x3D;temp.next(例如删除5号节点,把2号的next指向9号)<div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://cdn.staticaly.com/gh/FloatingDream1001/markdown_blog@main/2023/1/image-20230113230023680.png" alt="image (1)" style="zoom:67%;"></p></div></div></li></ul></li></ul><h3 id="先定义HeroNode"><a href="#先定义HeroNode" class="headerlink" title="先定义HeroNode"></a>先定义HeroNode</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个heroNode,每个HeroNode 对象是一个节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> no;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String nickname;</span><br><span class="line">    <span class="keyword">public</span> HeroNode2 next;  <span class="comment">//指向后一个节点  默认为null</span></span><br><span class="line">    <span class="keyword">public</span> HeroNode2 pre;  <span class="comment">//指向前一个节点   默认为null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroNode2</span> <span class="params">( <span class="type">int</span> no, String name, String nickname )</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no       = no;</span><br><span class="line">        <span class="built_in">this</span>.name     = name;</span><br><span class="line">        <span class="built_in">this</span>.nickname = nickname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了显示方便，我们重写toString</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span> <span class="params">( )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HeroNode [no=&quot;</span> + no + <span class="string">&quot;,name=&quot;</span> + name + <span class="string">&quot;,nickname=&quot;</span> + nickname + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增删改查代码实现"><a href="#增删改查代码实现" class="headerlink" title="增删改查代码实现"></a>增删改查代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个双向链表的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoubleLinkList</span> &#123;</span><br><span class="line">    <span class="comment">//先初始化一个头节点,头节点不要动，不存放具体数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">HeroNode2</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span> ( <span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回头节点</span></span><br><span class="line">    <span class="keyword">public</span> HeroNode2 <span class="title function_">getHead</span> <span class="params">( )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历双向链表</span></span><br><span class="line">    <span class="comment">//显示链表遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span> <span class="params">( )</span> &#123;</span><br><span class="line">        <span class="comment">//判断链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span> ( head.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">            System.out.println ( <span class="string">&quot;链表为空&quot;</span> );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为头节点，不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//判断是否到链表最后</span></span><br><span class="line">            <span class="keyword">if</span> ( temp == <span class="literal">null</span> ) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出节点的信息</span></span><br><span class="line">            System.out.println ( temp );</span><br><span class="line">            <span class="comment">//将temp后移</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加只能添加到最后</span></span><br><span class="line">    <span class="comment">//思路，当不考虑编号顺序时，</span></span><br><span class="line"><span class="comment">//        1.找到链表最后一个节点</span></span><br><span class="line"><span class="comment">//        2.将最后这个节点的next指向新节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span> <span class="params">( HeroNode2 heroNode )</span> &#123;</span><br><span class="line">        <span class="comment">//因为head节点不能动，因此我们需要一个辅助遍历temp</span></span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">//遍历链表找到最后</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//找到链表的最后</span></span><br><span class="line">            <span class="keyword">if</span> ( temp.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当退出while时，temp就指向最后</span></span><br><span class="line">        <span class="comment">//形成一个双向链表</span></span><br><span class="line">        temp.next    = heroNode;</span><br><span class="line">        heroNode.pre = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加，按照编号顺序添加（与单链表差不多，只是要多考虑pre）</span></span><br><span class="line">    <span class="comment">//如果有这个排名提示添加失败</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addpro</span> <span class="params">( HeroNode2 heroNode )</span> &#123;</span><br><span class="line">        <span class="comment">//因为头节点不能动，因此仍需要辅助节点来帮助我们添加</span></span><br><span class="line"><span class="comment">//        因为单链表,因此我们找的temp是位于添加位置的前一个节点，否则添加不进去</span></span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">//标志添加的编号是否存在，默认为false</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag2</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( temp.next == <span class="literal">null</span> ) &#123;<span class="comment">//说明temp已经在链表最后</span></span><br><span class="line">                flag2=<span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( temp.next.no &gt; heroNode.no ) &#123;<span class="comment">//位置找到，就在temp后面插入</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( temp.next.no == heroNode.no ) &#123;<span class="comment">//要添加的heronode存在</span></span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;<span class="comment">//后移遍历</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( flag ) &#123;<span class="comment">//编号存在</span></span><br><span class="line">            System.out.printf ( <span class="string">&quot;准备插入的英雄编号%d,已经存在,不能加入\n&quot;</span>, heroNode.no );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (  flag2 ) &#123;</span><br><span class="line">            heroNode.pre=temp;</span><br><span class="line">            temp.next = heroNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//插入到正确位置。temp后面</span></span><br><span class="line">            <span class="type">HeroNode2</span> <span class="variable">next</span> <span class="operator">=</span> temp.next;</span><br><span class="line">            heroNode.next = temp.next;</span><br><span class="line">            temp.next = heroNode;</span><br><span class="line">            next.pre=heroNode;</span><br><span class="line">            heroNode.pre = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改一个节点的内容</span></span><br><span class="line">    <span class="comment">//修改节点的信息，根据no来修改，name，nickname</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updata</span> <span class="params">( HeroNode2 newHeroNode )</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span> ( head.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">            System.out.println ( <span class="string">&quot;链表为空&quot;</span> );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到需要修改的节点，根据no编号</span></span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">//表示是否找到该节点</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( temp == <span class="literal">null</span> ) &#123;</span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">//链表已经遍历完</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( temp.no == newHeroNode.no ) &#123;</span><br><span class="line">                <span class="comment">//找到节点</span></span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据flag判断节点是否可以找到</span></span><br><span class="line">        <span class="keyword">if</span> ( flag ) &#123;</span><br><span class="line">            temp.name     = newHeroNode.name;</span><br><span class="line">            temp.nickname = newHeroNode.nickname;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="comment">//没有找到</span></span><br><span class="line">            System.out.printf ( <span class="string">&quot;没有找到编号%d的节点，无法修改\n&quot;</span>, newHeroNode.no );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除一个节点</span></span><br><span class="line">    <span class="comment">//对于双向链表，可以直接删除，只用找到自己本身即可</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span> <span class="params">( <span class="type">int</span> no )</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断当前链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span> ( head.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">            System.out.println ( <span class="string">&quot;链表为空，无法删除&quot;</span> );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;  <span class="comment">//辅助指针</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;  <span class="comment">//标志是否找到待删除节点</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( temp.next == <span class="literal">null</span> ) &#123;  <span class="comment">//到最后</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( temp.no == no ) &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( flag ) &#123;</span><br><span class="line">            temp.pre.next = temp.next;</span><br><span class="line">            <span class="keyword">if</span> ( temp.next != <span class="literal">null</span> ) &#123;</span><br><span class="line">                temp.next.pre = temp.pre;  <span class="comment">//有条件，不能是最后一个，否则会出现空指针异常</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.printf ( <span class="string">&quot;列表中的no值无%d,无法删除\n&quot;</span>, no );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">find</span> <span class="params">( <span class="type">int</span> no )</span> &#123;</span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( temp.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( temp.no == no ) &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( flag ) &#123;</span><br><span class="line">            System.out.println ( <span class="string">&quot;你查找的信息如下：&quot;</span> );</span><br><span class="line">            System.out.println ( temp );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.printf ( <span class="string">&quot;列表中的no值无%d,无法查到\n&quot;</span>, no );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleLinkListDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        System.out.println ( <span class="string">&quot;双向链表的一个测试&quot;</span> );</span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">hero1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span> ( <span class="number">1</span>, <span class="string">&quot;松江&quot;</span>, <span class="string">&quot;及时雨&quot;</span> );</span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">hero2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span> ( <span class="number">2</span>, <span class="string">&quot;卢俊义&quot;</span>, <span class="string">&quot;玉麒麟&quot;</span> );</span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">hero3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span> ( <span class="number">3</span>, <span class="string">&quot;吴用&quot;</span>, <span class="string">&quot;智多星&quot;</span> );</span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">hero4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span> ( <span class="number">4</span>, <span class="string">&quot;林冲&quot;</span>, <span class="string">&quot;豹子头&quot;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个双向链表</span></span><br><span class="line">        <span class="type">DoubleLinkList</span> <span class="variable">doubleLinkList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoubleLinkList</span> ( );</span><br><span class="line">        <span class="comment">/*//按照添加的顺序来添加</span></span><br><span class="line"><span class="comment">        doubleLinkList.add ( hero1 );</span></span><br><span class="line"><span class="comment">        doubleLinkList.add ( hero2 );</span></span><br><span class="line"><span class="comment">        doubleLinkList.add ( hero3 );</span></span><br><span class="line"><span class="comment">        doubleLinkList.add ( hero4 );</span></span><br><span class="line"><span class="comment">        //打印出来</span></span><br><span class="line"><span class="comment">        doubleLinkList.list ();*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//按照no值来添加</span></span><br><span class="line">        doubleLinkList.addpro ( hero1 );</span><br><span class="line">        doubleLinkList.addpro ( hero3 );</span><br><span class="line">        doubleLinkList.addpro ( hero2 );</span><br><span class="line">        doubleLinkList.addpro ( hero4 );</span><br><span class="line">        doubleLinkList.list ();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        <span class="type">HeroNode2</span> <span class="variable">newHeroNode2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode2</span> ( <span class="number">4</span>, <span class="string">&quot;公孙胜&quot;</span>, <span class="string">&quot;入云龙&quot;</span> );</span><br><span class="line">        doubleLinkList.updata ( newHeroNode2 );</span><br><span class="line">        System.out.println (<span class="string">&quot;修改后&quot;</span> );</span><br><span class="line">        doubleLinkList.list ();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        doubleLinkList.delete ( <span class="number">3</span> );</span><br><span class="line">        System.out.println (<span class="string">&quot;删除后的链表情况&quot;</span> );</span><br><span class="line">        doubleLinkList.list ( );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查找</span></span><br><span class="line">        doubleLinkList.find ( <span class="number">3</span> );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LinkList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单链表</title>
      <link href="/posts/71c610d3.html"/>
      <url>/posts/71c610d3.html</url>
      
        <content type="html"><![CDATA[<h1 id="单链表（SingleLinked-List）"><a href="#单链表（SingleLinked-List）" class="headerlink" title="单链表（SingleLinked List）"></a>单链表（SingleLinked List）</h1><img src="/posts/71c610d3.htm/image-20230111234126554.jpg" alt="image-20230111234126554" style="zoom:67%;"><img src="/posts/71c610d3.htm/image-20230111234719805.png" alt="image-20230111234719805" style="zoom:67%;"><blockquote><p>小结</p><blockquote><p>链表是以节点的方式来存储</p><p>每个节点包括data域和next域</p><p>data域存值，next域指向下一个节点</p><p>链表       （带头节点的&#x2F;不带头节点的）<br><label style="color:red">链表的各个节点不一定是连续存放的</label></p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LinkList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/posts/5c2fafc7.html"/>
      <url>/posts/5c2fafc7.html</url>
      
        <content type="html"><![CDATA[<h1 id="这是我的第一篇文章"><a href="#这是我的第一篇文章" class="headerlink" title="这是我的第一篇文章"></a>这是我的第一篇文章</h1><p><strong>今天是 2022 年的最后一天，加油 2023，再见 2022</strong></p><style></style>]]></content>
      
      
      <categories>
          
          <category> 个人日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> happy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SingleLinkList</title>
      <link href="/posts/1faa2557.html"/>
      <url>/posts/1faa2557.html</url>
      
        <content type="html"><![CDATA[<script type="text/javascript">SAONotify('Update','欢迎光临！阳玥小屋上新啦！','location.reload(true);');</script><span class="p center logo large">单链表基础功能</span><span class="p center small">数据结构——初始单链表</span><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义SingleLinkedList管理英雄</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleLinkedList</span> &#123;</span><br><span class="line">    <span class="comment">//先初始化一个头节点,头节点不要动，不存放具体数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">HeroNode</span> <span class="variable">head</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span> ( <span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回头节点</span></span><br><span class="line">    <span class="keyword">public</span> HeroNode <span class="title function_">getHead</span> <span class="params">( )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加节点到单链表中</span></span><br><span class="line">    <span class="comment">//思路，当不考虑编号顺序时，</span></span><br><span class="line"><span class="comment">//        1.找到链表最后一个节点</span></span><br><span class="line"><span class="comment">//        2.将最后这个节点的next指向新节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span> <span class="params">( HeroNode heroNode )</span> &#123;</span><br><span class="line">        <span class="comment">//因为head节点不能动，因此我们需要一个辅助遍历temp</span></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">//遍历链表找到最后</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//找到链表的最后</span></span><br><span class="line">            <span class="keyword">if</span> ( temp.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当退出while时，temp就指向最后</span></span><br><span class="line">        temp.next = heroNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二种方式在添加英雄，将英雄添加到指定位置</span></span><br><span class="line">    <span class="comment">//如果有这个排名提示添加失败</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addpro</span> <span class="params">( HeroNode heroNode )</span> &#123;</span><br><span class="line">        <span class="comment">//因为头节点不能动，因此仍需要辅助节点来帮助我们添加</span></span><br><span class="line"><span class="comment">//        因为单链表,因此我们找的temp是位于添加位置的前一个节点，否则添加不进去</span></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">//标志添加的编号是否存在，默认为false</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( temp.next == <span class="literal">null</span> ) &#123;<span class="comment">//说明temp已经在链表最后</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( temp.next.no &gt; heroNode.no ) &#123;<span class="comment">//位置找到，就在temp后面插入</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( temp.next.no == heroNode.no ) &#123;<span class="comment">//要添加的heronode依然存在</span></span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;<span class="comment">//后移遍历</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( flag ) &#123;<span class="comment">//编号存在</span></span><br><span class="line">            System.out.printf ( <span class="string">&quot;准备插入的英雄编号%d,已经存在,不能加入\n&quot;</span>, heroNode.no );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//插入到正确位置。temp后面</span></span><br><span class="line">            heroNode.next = temp.next;</span><br><span class="line">            temp.next     = heroNode;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改节点的信息，根据no来修改，name，nickname</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updata</span> <span class="params">( HeroNode newHeroNode )</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span> ( head.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">            System.out.println ( <span class="string">&quot;链表为空&quot;</span> );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到需要修改的节点，根据no编号</span></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;<span class="comment">//表示是否找到该节点</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( temp == <span class="literal">null</span> ) &#123;</span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">//链表已经遍历完</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( temp.no == newHeroNode.no ) &#123;</span><br><span class="line">                <span class="comment">//找到节点</span></span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据flag判断节点是否可以找到</span></span><br><span class="line">        <span class="keyword">if</span> ( flag ) &#123;</span><br><span class="line">            temp.name     = newHeroNode.name;</span><br><span class="line">            temp.nickname = newHeroNode.nickname;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="comment">//没有找到</span></span><br><span class="line">            System.out.printf ( <span class="string">&quot;没有找到编号%d的节点，无法修改\n&quot;</span>, newHeroNode.no );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除节点</span></span><br><span class="line">    <span class="comment">//就是将要删除的前一个节点的next==要删除的next</span></span><br><span class="line"><span class="comment">//    temp.next=temp.next.next;</span></span><br><span class="line">    <span class="comment">//思路：</span></span><br><span class="line">    <span class="comment">//1.head不能动，因此我们需要一个temp辅助接点找到待删除的前一个节点</span></span><br><span class="line">    <span class="comment">//2.说明我们在比较时，temp.next.no=目标节点的no</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span> <span class="params">( <span class="type">int</span> no )</span> &#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( temp.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( temp.next.no == no ) &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( flag ) &#123;</span><br><span class="line">            temp.next = temp.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.printf ( <span class="string">&quot;列表中的no值无%d,无法删除\n&quot;</span>, no );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">find</span> <span class="params">( <span class="type">int</span> no )</span> &#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( temp.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( temp.no == no ) &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( flag ) &#123;</span><br><span class="line">            System.out.println ( <span class="string">&quot;你查找的信息如下：&quot;</span> );</span><br><span class="line">            System.out.println ( temp );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.printf ( <span class="string">&quot;列表中的no值无%d,无法查到\n&quot;</span>, no );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示链表遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">list</span> <span class="params">( )</span> &#123;</span><br><span class="line">        <span class="comment">//判断链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span> ( head.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">            System.out.println ( <span class="string">&quot;链表为空&quot;</span> );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为头节点，不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//判断是否到链表最后</span></span><br><span class="line">            <span class="keyword">if</span> ( temp == <span class="literal">null</span> ) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出节点的信息</span></span><br><span class="line">            System.out.println ( temp );</span><br><span class="line">            <span class="comment">//将temp后移</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个heroNode,每个HeroNode 对象是一个节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HeroNode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> no;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String nickname;</span><br><span class="line">    <span class="keyword">public</span> HeroNode next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeroNode</span> <span class="params">( <span class="type">int</span> no, String name, String nickname )</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.no       = no;</span><br><span class="line">        <span class="built_in">this</span>.name     = name;</span><br><span class="line">        <span class="built_in">this</span>.nickname = nickname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了显示方便，我们重写toString</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span> <span class="params">( )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HeroNode [no=&quot;</span> + no + <span class="string">&quot;,name=&quot;</span> + name + <span class="string">&quot;,nickname=&quot;</span> + nickname + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleLinkListDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="comment">//进行一个测试</span></span><br><span class="line">        <span class="comment">//先创建节点</span></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">hero1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span> ( <span class="number">1</span>, <span class="string">&quot;松江&quot;</span>, <span class="string">&quot;及时雨&quot;</span> );</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">hero2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span> ( <span class="number">3</span>, <span class="string">&quot;卢俊义&quot;</span>, <span class="string">&quot;玉麒麟&quot;</span> );</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">hero3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span> ( <span class="number">2</span>, <span class="string">&quot;吴用&quot;</span>, <span class="string">&quot;智多星&quot;</span> );</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">hero4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span> ( <span class="number">4</span>, <span class="string">&quot;林冲&quot;</span>, <span class="string">&quot;豹子头&quot;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个链表</span></span><br><span class="line">        <span class="type">SingleLinkedList</span> <span class="variable">singleLinkedList1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleLinkedList</span> ( );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加入</span></span><br><span class="line"><span class="comment">//        singleLinkedList1.add ( hero1 );</span></span><br><span class="line"><span class="comment">//        singleLinkedList1.add ( hero2 );</span></span><br><span class="line"><span class="comment">//        singleLinkedList1.add ( hero3 );</span></span><br><span class="line"><span class="comment">//        singleLinkedList1.add ( hero4 );</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println (&quot;增删改查&quot; );</span></span><br><span class="line">        <span class="comment">//添加</span></span><br><span class="line">        singleLinkedList1.addpro ( hero1 );</span><br><span class="line">        singleLinkedList1.addpro ( hero3 );</span><br><span class="line">        singleLinkedList1.addpro ( hero2 );</span><br><span class="line">        singleLinkedList1.addpro ( hero2 );</span><br><span class="line">        singleLinkedList1.addpro ( hero4 );</span><br><span class="line"></span><br><span class="line">        singleLinkedList1.list ( );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">newHeroNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span> ( <span class="number">2</span>, <span class="string">&quot;小卢&quot;</span>, <span class="string">&quot;玉麒麟~~&quot;</span> );</span><br><span class="line">        singleLinkedList1.updata ( newHeroNode );</span><br><span class="line">        <span class="comment">//显示列表</span></span><br><span class="line">        singleLinkedList1.list ( );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查找</span></span><br><span class="line">        singleLinkedList1.find ( <span class="number">3</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        singleLinkedList1.delete ( <span class="number">1</span> );</span><br><span class="line">        singleLinkedList1.delete ( <span class="number">4</span> );</span><br><span class="line">        System.out.println (<span class="string">&quot;删除完后的列表&quot;</span> );</span><br><span class="line">        singleLinkedList1.list ( );</span><br><span class="line">        System.out.printf (<span class="string">&quot;链表中有效节点为%d\n&quot;</span>,getLength ( singleLinkedList1.getHead()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单链表题目练习"><a href="#单链表题目练习" class="headerlink" title="单链表题目练习"></a>单链表题目练习</h2><h3 id="求链表的有效节点个数"><a href="#求链表的有效节点个数" class="headerlink" title="求链表的有效节点个数"></a>求链表的有效节点个数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法：获取到单链表的有效节点个数（如果是带头节点的列表，需要去掉头）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> head 链表的头节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回值为有效值的个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getLength</span> <span class="params">( HeroNode head )</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ( head.next == <span class="literal">null</span> ) &#123;<span class="comment">//空列表</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//定义一个辅助节点,这里我们没有统计头节点</span></span><br><span class="line">    <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">        length++;</span><br><span class="line">        temp = temp.next;<span class="comment">//遍历</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找单链表的倒数第K个节点"><a href="#查找单链表的倒数第K个节点" class="headerlink" title="查找单链表的倒数第K个节点"></a>查找单链表的倒数第K个节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找单链表的倒数第K个节点</span></span><br><span class="line"><span class="comment">//思路</span></span><br><span class="line"><span class="comment">//1.编写一个方法，接收一个head节点，同时接收一个index(index为查找倒数第几个的值)</span></span><br><span class="line"><span class="comment">//2.先把链表从头到位遍历，先得到总的长度</span></span><br><span class="line"><span class="comment">//3.然后遍历从头到（size-index）个</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findIndex</span> <span class="params">( HeroNode head, <span class="type">int</span> index )</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ( head.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">        System.out.println ( <span class="string">&quot;列表为空&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> getLength ( head );</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> size - index;</span><br><span class="line">    <span class="keyword">if</span> ( num &lt; <span class="number">0</span> || num &gt; size ) &#123;</span><br><span class="line">        System.out.println ( <span class="string">&quot;index值输入错误&quot;</span> );</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; num) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println ( temp );</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表进行反转"><a href="#单链表进行反转" class="headerlink" title="单链表进行反转"></a>单链表进行反转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//单链表进行反转</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverseLinkedList</span> <span class="params">( HeroNode head )</span> &#123;</span><br><span class="line">        <span class="comment">//如果当前列表为空，或者只有一个节点，就不去反转，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> ( head.next == <span class="literal">null</span> || head.next.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个辅助指针，帮助我们遍历原来的链表</span></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">//指向当前节点的下一个节点</span></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">reverseHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span> ( <span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span> );</span><br><span class="line">        <span class="comment">//遍历原来的链表，</span></span><br><span class="line">        <span class="comment">//并且每遍历一个节点，就将其取出，并放到新的列表reverseHead的最前端</span></span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//让辅助链表替原链表遍历，让节点的下一个等于新链表head.next</span></span><br><span class="line">            next      = temp.next;<span class="comment">//先暂时保存当前节点的下一个节点，因为后面需要使用</span></span><br><span class="line">            temp.next = reverseHead.next;  <span class="comment">//解决后连问题  把原链表的节点的next数据清除，达到一次插入一个节点</span></span><br><span class="line"><span class="comment">//            System.out.println (reverseHead.next );</span></span><br><span class="line">            reverseHead.next = temp;  <span class="comment">//解决头部与遍历节点的连接</span></span><br><span class="line">            temp             = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将head.next指向reverseHead.next，实现单链表反转</span></span><br><span class="line">        head.next = reverseHead.next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="逆序打印单链表"><a href="#逆序打印单链表" class="headerlink" title="逆序打印单链表"></a>逆序打印单链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从尾到头打印单链表（逆序打印单链表）</span></span><br><span class="line"><span class="comment">//可以利用栈这个数据结构，将各个节点压入栈中，再利用栈的先进后出的特点，实现逆序打印</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reversePrint</span> <span class="params">( HeroNode head )</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ( head.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">        System.out.println ( <span class="string">&quot;空链表无打印&quot;</span> );</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建一个栈，将各个节点压入栈中</span></span><br><span class="line">    Stack&lt;HeroNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;HeroNode&gt; ( );</span><br><span class="line">    <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">    <span class="comment">//将链表的所有结点压入站点</span></span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">        stack.push ( temp );  <span class="comment">//压入</span></span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//压入栈以后，将栈中的节点进行打印</span></span><br><span class="line">    <span class="keyword">while</span> (stack.size ( ) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println ( stack.pop ( ) );  <span class="comment">//弹出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并两个有序的单链表，合并之后依然有序"><a href="#合并两个有序的单链表，合并之后依然有序" class="headerlink" title="合并两个有序的单链表，合并之后依然有序"></a>合并两个有序的单链表，合并之后依然有序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//合并两个有序的单链表，合并之后依然有序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SingleLinkedList <span class="title function_">combineSingleLink</span> <span class="params">( SingleLinkedList link1, SingleLinkedList link2 )</span> &#123;</span><br><span class="line">    <span class="type">HeroNode</span> <span class="variable">head1</span> <span class="operator">=</span> link1.getHead ( );</span><br><span class="line">    <span class="type">HeroNode</span> <span class="variable">head2</span> <span class="operator">=</span> link2.getHead ( );</span><br><span class="line">    <span class="keyword">if</span> ( head1.next == <span class="literal">null</span> &amp;&amp; head2.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( head1.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">        System.out.println ( <span class="string">&quot;链表一为空&quot;</span> );</span><br><span class="line">        <span class="keyword">return</span> link2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( head2.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">        System.out.println ( <span class="string">&quot;链表二为空&quot;</span> );</span><br><span class="line">        <span class="keyword">return</span> link1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">HeroNode</span> <span class="variable">temp1</span> <span class="operator">=</span> head1.next;</span><br><span class="line">    <span class="type">HeroNode</span> <span class="variable">temp2</span> <span class="operator">=</span> head2.next;</span><br><span class="line">    <span class="type">SingleLinkedList</span> <span class="variable">link</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleLinkedList</span> ( );</span><br><span class="line">    <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> link.getHead ( );</span><br><span class="line">    temp.next = temp1;</span><br><span class="line">    <span class="type">HeroNode</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( temp.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">            temp.next = temp2;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( temp2.no &lt;= temp.next.no ) &#123;</span><br><span class="line">            next       = temp2.next;   <span class="comment">//此部分和反转链表一样，这个要加在最后面，而反转链表反之</span></span><br><span class="line">            temp2.next = temp.next;</span><br><span class="line">            temp.next  = temp2;</span><br><span class="line">            temp2      = next;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> link;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleLinkListDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="comment">//进行一个测试</span></span><br><span class="line">        <span class="comment">//先创建节点</span></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">hero1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span> ( <span class="number">2</span>, <span class="string">&quot;松江&quot;</span>, <span class="string">&quot;及时雨&quot;</span> );</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">hero2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span> ( <span class="number">3</span>, <span class="string">&quot;卢俊义&quot;</span>, <span class="string">&quot;玉麒麟&quot;</span> );</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">hero3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span> ( <span class="number">5</span>, <span class="string">&quot;吴用&quot;</span>, <span class="string">&quot;智多星&quot;</span> );</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">hero4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span> ( <span class="number">6</span>, <span class="string">&quot;林冲&quot;</span>, <span class="string">&quot;豹子头&quot;</span> );</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">hero5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span> ( <span class="number">1</span>, <span class="string">&quot;松江&quot;</span>, <span class="string">&quot;及时雨&quot;</span> );</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">hero6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span> ( <span class="number">4</span>, <span class="string">&quot;卢俊义&quot;</span>, <span class="string">&quot;玉麒麟&quot;</span> );</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">hero7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span> ( <span class="number">8</span>, <span class="string">&quot;吴用&quot;</span>, <span class="string">&quot;智多星&quot;</span> );</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">hero8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span> ( <span class="number">9</span>, <span class="string">&quot;林冲&quot;</span>, <span class="string">&quot;豹子头&quot;</span> );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个链表</span></span><br><span class="line">        <span class="type">SingleLinkedList</span> <span class="variable">singleLinkedList1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleLinkedList</span> ( );</span><br><span class="line">        <span class="type">SingleLinkedList</span> <span class="variable">singleLinkedList2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleLinkedList</span> ( );</span><br><span class="line"></span><br><span class="line"><span class="comment">//填充链表1和链表2</span></span><br><span class="line">        singleLinkedList1.addpro ( hero1 );</span><br><span class="line">        singleLinkedList1.addpro ( hero3 );</span><br><span class="line">        singleLinkedList1.addpro ( hero2 );</span><br><span class="line">        singleLinkedList1.addpro ( hero4 );</span><br><span class="line">        singleLinkedList2.addpro ( hero5 );</span><br><span class="line">        singleLinkedList2.addpro ( hero6 );</span><br><span class="line">        singleLinkedList2.addpro ( hero7 );</span><br><span class="line">        singleLinkedList2.addpro ( hero8 );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组合后的链表</span></span><br><span class="line">        combineSingleLink ( singleLinkedList1, singleLinkedList2 ).list ( );</span><br><span class="line"></span><br><span class="line">        System.out.printf ( <span class="string">&quot;链表中有效节点为%d\n&quot;</span>, getLength ( singleLinkedList1.getHead ( ) ) );</span><br><span class="line">        <span class="comment">//逆序打印</span></span><br><span class="line">        System.out.println ( <span class="string">&quot;测试逆序打印单链表,没有改变本身结构&quot;</span> );</span><br><span class="line">        reversePrint ( singleLinkedList1.getHead ( ) );</span><br><span class="line">        <span class="comment">//查找倒数第二个值</span></span><br><span class="line">        System.out.println ( <span class="string">&quot;查找值&quot;</span> );</span><br><span class="line">        findIndex ( singleLinkedList1.getHead ( ), <span class="number">2</span> );</span><br><span class="line">        System.out.println ( <span class="string">&quot;修改之后的列表&quot;</span> );</span><br><span class="line">        singleLinkedList1.list ( );</span><br><span class="line">        <span class="comment">//反转单链表</span></span><br><span class="line">        System.out.println ( <span class="string">&quot;原来链表&quot;</span> );</span><br><span class="line">        singleLinkedList1.list ( );</span><br><span class="line"></span><br><span class="line">        System.out.println ( <span class="string">&quot;反转后的链表&quot;</span> );</span><br><span class="line">        reverseLinkedList ( singleLinkedList1.getHead ( ) );</span><br><span class="line">        singleLinkedList1.list ( );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法：获取到单链表的有效节点个数（如果是带头节点的列表，需要去掉头）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head 链表的头节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回值为有效值的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getLength</span> <span class="params">( HeroNode head )</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( head.next == <span class="literal">null</span> ) &#123;<span class="comment">//空列表</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//定义一个辅助节点,这里我们没有统计头节点</span></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">            length++;</span><br><span class="line">            temp = temp.next;<span class="comment">//遍历</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找单链表的倒数第K个节点</span></span><br><span class="line">    <span class="comment">//思路</span></span><br><span class="line">    <span class="comment">//1.编写一个方法，接收一个head节点，同时接收一个index(index为查找倒数第几个的值)</span></span><br><span class="line">    <span class="comment">//2.先把链表从头到位遍历，先得到总的长度</span></span><br><span class="line">    <span class="comment">//3.然后遍历从头到（size-index）个</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findIndex</span> <span class="params">( HeroNode head, <span class="type">int</span> index )</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( head.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">            System.out.println ( <span class="string">&quot;列表为空&quot;</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> getLength ( head );</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> size - index;</span><br><span class="line">        <span class="keyword">if</span> ( num &lt; <span class="number">0</span> || num &gt; size ) &#123;</span><br><span class="line">            System.out.println ( <span class="string">&quot;index值输入错误&quot;</span> );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; num) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println ( temp );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单链表进行反转</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverseLinkedList</span> <span class="params">( HeroNode head )</span> &#123;</span><br><span class="line">        <span class="comment">//如果当前列表为空，或者只有一个节点，就不去反转，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> ( head.next == <span class="literal">null</span> || head.next.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个辅助指针，帮助我们遍历原来的链表</span></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">//指向当前节点的下一个节点</span></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">reverseHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HeroNode</span> ( <span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span> );</span><br><span class="line">        <span class="comment">//遍历原来的链表，</span></span><br><span class="line">        <span class="comment">//并且每遍历一个节点，就将其取出，并放到新的列表reverseHead的最前端</span></span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//让辅助链表替原链表遍历，让节点的下一个等于新链表head.next</span></span><br><span class="line">            next      = temp.next;<span class="comment">//先暂时保存当前节点的下一个节点，因为后面需要使用</span></span><br><span class="line">            temp.next = reverseHead.next;  <span class="comment">//解决后连问题  把原链表的节点的next数据清除，达到一次插入一个节点</span></span><br><span class="line"><span class="comment">//            System.out.println (reverseHead.next );</span></span><br><span class="line">            reverseHead.next = temp;  <span class="comment">//解决头部与遍历节点的连接</span></span><br><span class="line">            temp             = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将head.next指向reverseHead.next，实现单链表反转</span></span><br><span class="line">        head.next = reverseHead.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从尾到头打印单链表（逆序打印单链表）</span></span><br><span class="line">    <span class="comment">//可以利用栈这个数据结构，将各个节点压入栈中，再利用栈的先进后出的特点，实现逆序打印</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reversePrint</span> <span class="params">( HeroNode head )</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ( head.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">            System.out.println ( <span class="string">&quot;空链表无打印&quot;</span> );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建一个栈，将各个节点压入栈中</span></span><br><span class="line">        Stack&lt;HeroNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;HeroNode&gt; ( );</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="comment">//将链表的所有结点压入站点</span></span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push ( temp );  <span class="comment">//压入</span></span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//压入栈以后，将栈中的节点进行打印</span></span><br><span class="line">        <span class="keyword">while</span> (stack.size ( ) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println ( stack.pop ( ) );  <span class="comment">//弹出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//合并两个有序的单链表，合并之后依然有序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleLinkedList <span class="title function_">combineSingleLink</span> <span class="params">( SingleLinkedList link1, SingleLinkedList link2 )</span> &#123;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">head1</span> <span class="operator">=</span> link1.getHead ( );</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">head2</span> <span class="operator">=</span> link2.getHead ( );</span><br><span class="line">        <span class="keyword">if</span> ( head1.next == <span class="literal">null</span> &amp;&amp; head2.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( head1.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">            System.out.println ( <span class="string">&quot;链表一为空&quot;</span> );</span><br><span class="line">            <span class="keyword">return</span> link2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( head2.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">            System.out.println ( <span class="string">&quot;链表二为空&quot;</span> );</span><br><span class="line">            <span class="keyword">return</span> link1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp1</span> <span class="operator">=</span> head1.next;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp2</span> <span class="operator">=</span> head2.next;</span><br><span class="line">        <span class="type">SingleLinkedList</span> <span class="variable">link</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleLinkedList</span> ( );</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">temp</span> <span class="operator">=</span> link.getHead ( );</span><br><span class="line">        temp.next = temp1;</span><br><span class="line">        <span class="type">HeroNode</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (temp2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( temp.next == <span class="literal">null</span> ) &#123;</span><br><span class="line">                temp.next = temp2;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ( temp2.no &lt;= temp.next.no ) &#123;</span><br><span class="line">                next       = temp2.next;</span><br><span class="line">                temp2.next = temp.next;</span><br><span class="line">                temp.next  = temp2;</span><br><span class="line">                temp2      = next;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> link;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><style></style>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LinkList </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>图库</title>
      <link href="/Gallery/index.html"/>
      <url>/Gallery/index.html</url>
      
        <content type="html"><![CDATA[<div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="https://source.fomal.cc/img/default_cover_61.webp" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">封面专区</div>  <p>本站用作文章封面的图片，不保证分辨率</p>  <a href="/photo"></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="https://source.fomal.cc/img/dm11.webp" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">背景专区</div>  <p>收藏的一些的背景与壁纸，分辨率很高</p>  <a href="/wallpaper"></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="https://source.fomal.cc/img/dm12.webp" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">日常</div>  <p>日常照片</p>  <a href="/dayimages"></a>  </figcaption>  </figure>  </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<!-- GitCalendar容器<div id="gitZone"></div> -->]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>charts</title>
      <link href="/charts/index.html"/>
      <url>/charts/index.html</url>
      
        <content type="html"><![CDATA[<!-- 文章发布时间统计图 --><div id="posts-chart" data-start="2021-01" style="border-radius: 8px; height: 300px; padding: 10px;"></div><!-- 文章标签统计图 --><div id="tags-chart" data-length="10" style="border-radius: 8px; height: 300px; padding: 10px;"></div><!-- 文章分类统计图 --><div id="categories-chart" data-parent="true" style="border-radius: 8px; height: 300px; padding: 10px;"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>快乐日常</title>
      <link href="/dayimages/index.html"/>
      <url>/dayimages/index.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="cc8f5c05993c39f72d12fe6cad8ca3801e08fbe6ad78063d2101a23b843aeb16">24192ee3beba83a9dc0f3becdf4156a27866a9f2c2dc98ced01008398beec48005a0f59886f4c4e17a0cdebbe6241145ac7cc1b47116cb8bf4006a86b3d67e1b933623c0f8f91a55f48ea857ecbf3de946f8707ee6a609cb304a37119ac5e645b1ca39324434d5b7af9c2a35007b219d68d587c6625eaa4c23d78a997efe8a10fa7d43ca1a29048bc8bb8278a4452a668979b2243adb49dcfe925cce0d5f185b890e88662b6e78899654577d7c7442a262c27c3777880318bd2e13c908c1766a907c4affc51a74a91bbcfed8b57e46afc9ef5e2259499181d3b2414fc00e975a7f0dc9a3f2fdcd909f14eff791cd4cfdbc1860097fb6f3cd58595664d7ad8e4a980b8393cbc4e7058755992de83b659194c831df943287856ed179f8e2bc5542f42bdb18451a5ea8f886fcea222ddb927993fd7e97b57a00615ce333931f11175b6304aa621a100563420c6efbfecd375e210862b8f4a43bd345b630df09c2c5b50ced52a51c92ac8a0303cdfcaddb421781a33f890778df217b679213191774411b7134ba69f19a3beb1e6d5a116fc945a5577976dd90f183cf3978ccc29fb4135a2bd1cca87646b2787d27411e41e9ff873f91d82add36e37e980e28e504ce02ef8440598e971b824419c968c09e0b4278fc46410b70973bfe76c1dfbd96619fedd45c0f7ed027473c16f29b605cefe5607ffdd2349cf35b7b9f821d3aba373c20a927558f284b4b0d4fd3f02528428045020a6318760046595ee99564b03f5113209eae4c9b5c4f15f6e216a6239ec5cd8838ba72f0cd652f7ffff713d579e61ad2ffa0b4a76cfee6374aff21e78f95fe9f243b2ea63f656f34c36861087298cccf7104b3069084b69accb2bb07b485b93225ea00ef1924b5c8a69e965aaad425166213265068e36be81ef1e205795e70e93c2dfe3ea7cdbd81144b16a463f2d96e7a37e5561f98ac9ec563b0a39999084eae82ec2303409a9969a6a811e65b782da8e0914eee85f3f3ba14ae784ea6ae8a14a93bd54f935e0c364567fd9e1705620d51cb33bb224b01000e2cf9815cd130e334e29d269c493620ad295f8bf3d9335797f4b792f5c60a0d33899c9d076ac36888d34b7e23cf5652ff8a6ea367c028ae9ca99a80ae961295d8d8e9a61e5a8559354d0287894102e9bb3fbbae49b0133fbad2cae9bed62afc7464f234542b23b1bda677c08de7dc88f1838f6ade027587ae69acd48aeb12cf448a5f3d25b4c6121c698c882731eaa139268fdd223e2633380d5711d1f73c86ab039a51757dd2321da7ca35a89970ad5d6998bb54194e20c5896c331aa633c5c7b1ab8fd9af3899f3ecfcda56a9bc33b6e6f8b5</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里记录着站长的日常时光，需要密码哦.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/console.js"/>
      <url>/js/console.js</url>
      
        <content type="html"><![CDATA[var now1 = new Date();function createtime1() {    var grt = new Date("01/01/2023 00:00:00"); //此处修改你的建站时间或者网站上线时间    now1.setTime(now1.getTime() + 250);    var days = (now1 - grt) / 1000 / 60 / 60 / 24;    var dnum = Math.floor(days);    var ascll = [        `欢迎来到FloatingDream1001小家!`,        `Future is now 🍭🍭🍭`,        `        ███████  ██████  ███    ███  █████  ██      ██   ██  █████  ██    ██ ████████ ██      ██    ██ ████  ████ ██   ██ ██      ██   ██ ██   ██ ██    ██    ██    █████   ██    ██ ██ ████ ██ ███████ ██      ███████ ███████ ██    ██    ██    ██      ██    ██ ██  ██  ██ ██   ██ ██      ██   ██ ██   ██ ██    ██    ██    ██       ██████  ██      ██ ██   ██ ███████ ██   ██ ██   ██  ██████     ██                                                 `,        "小站已经苟活",        dnum,        "天啦!",        "©2023 By FloatingDream",    ];    setTimeout(        console.log.bind(            console,            `\n%c${ascll[0]} %c ${ascll[1]} %c ${ascll[2]} %c${ascll[3]}%c ${ascll[4]}%c ${ascll[5]}\n\n%c ${ascll[6]}\n`,            "color:#39c5bb",            "",            "color:#39c5bb",            "color:#39c5bb",            "",            "color:#39c5bb",            ""        )    );}createtime1();function createtime2() {    var ascll2 = [`NCC2-036`, `调用前置摄像头拍照成功，识别为「大聪明」`, `Photo captured: `, ` 🤪 `];    setTimeout(        console.log.bind(            console,            `%c ${ascll2[0]} %c ${ascll2[1]} %c \n${ascll2[2]} %c\n${ascll2[3]}`,            "color:white; background-color:#10bcc0",            "",            "",            'background:url("https://unpkg.zhimg.com/anzhiyu-assets@latest/image/common/tinggge.gif") no-repeat;font-size:450%'        )    );    setTimeout(console.log.bind(console, "%c WELCOME %c 欢迎光临，大聪明", "color:white; background-color:#23c682", ""));    setTimeout(        console.warn.bind(            console,            "%c ⚡ Powered by FloatingDream %c 你正在访问FloatingDreamの小家",            "color:white; background-color:#f0ad4e",            ""        )    );    setTimeout(console.log.bind(console, "%c W23-12 %c 系统监测到你已打开控制台", "color:white; background-color:#4f90d9", ""));    setTimeout(        console.warn.bind(console, "%c S013-782 %c 你现在正处于监控中", "color:white; background-color:#d9534f", "")    );}createtime2();// 重写console方法console.log = function () { };console.error = function () { };console.warn = function () { };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[@import "//at.alicdn.com/t/c/font_3854470_jl2r7tcvecj.js";/* 侧边栏标签 *//* 归档样式 */span.card-archive-list-count {  width: auto;  text-align: left;  font-size: 1.5rem;  line-height: 0.9;  font-weight: 700;}.card-archive-list-count-group {  display: flex;  flex-direction: row;  align-items: baseline;}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span:last-child,#aside-content .card-categories ul.card-category-list > .card-category-list-item a span:last-child {  width: fit-content;  margin-left: 4px;}span.card-archive-list-count {  width: auto;  text-align: left;  font-size: 1.1rem;  line-height: 0.9;  font-weight: 700;}.card-archive-list-date {  font-size: 14px;  opacity: 0.6;}li.card-archive-list-item {  width: 100%;  flex: 0 0 48%;}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:hover,#aside-content .card-categories ul.card-category-list > .card-category-list-item a:hover {  color: var(--anzhiyu-white);  background-color: var(--anzhiyu-theme);  box-shadow: var(--anzhiyu-shadow-theme);  border-radius: 8px;  padding-left: 0.5rem;  padding-right: 0.5rem;}@media screen and (min-width: 1300px) {  #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:hover,  #aside-content .card-categories ul.card-category-list > .card-category-list-item a:hover {    transform: scale(1.03);  }  #aside-content .card-archives ul.card-archive-list > .card-archive-list-item a:active,  #aside-content .card-categories ul.card-category-list > .card-category-list-item a:active {    transform: scale(0.97);  }}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a,#aside-content .card-categories ul.card-category-list > .card-category-list-item a {  border-radius: 8px;  margin: 4px 0;  display: flex;  flex-direction: column;  align-content: space-between;  border: var(--style-border);}#aside-content .card-archives ul.card-archive-list > .card-archive-list-item a span:first-child,#aside-content .card-categories ul.card-category-list > .card-category-list-item a span:first-child {  width: auto;  flex: inherit;}#aside-content .card-archives ul.card-archive-list,#aside-content .card-categories ul.card-category-list {  display: flex;  flex-direction: row;  justify-content: space-between;  flex-wrap: wrap;}/* 侧边栏文章修改 */#aside-content .aside-list > .aside-list-item .content > time {  display: none;}#aside-content .aside-list > .aside-list-item .content > .title {  -webkit-line-clamp: 3;  font-weight: 700;  padding: 2px 0;}#aside-content .aside-list > .aside-list-item {  padding: 8px;  padding-top: 6px !important;  padding-bottom: 6px !important;  border-radius: 12px;  transition: 0.3s;  margin: 4px 0;  cursor: pointer;}@media screen and (min-width: 1300px) {  #aside-content .aside-list > .aside-list-item:hover {    transform: scale(1.03);  }  #aside-content .aside-list > .aside-list-item:active {    transform: scale(0.97);  }}#aside-content .aside-list > .aside-list-item:hover .thumbnail > img {  transform: scale(1);}#aside-content .aside-list > .aside-list-item:not(:last-child) {  border-bottom: 0 dashed var(--anzhiyu-background) !important;}#aside-content .aside-list > .aside-list-item .thumbnail {  border-radius: 8px;  border: var(--style-border);}#aside-content .aside-list > .aside-list-item:hover {  background: var(--anzhiyu-blue-main);  color: var(--anzhiyu-white);  transition: 0.3s;  box-shadow: var(--anzhiyu-shadow-main);}#aside-content .aside-list > .aside-list-item:hover a {  color: var(--anzhiyu-white) !important;}.card-widget.card-recent-post {  padding: 0.4rem 0.6rem !important;}/* 页脚与头图透明 */#footer {    background: transparent !important;}#page-header {    background: transparent !important;}/* 白天模式遮罩透明 */#footer::before {  background: transparent !important;}#page-header::before {  background: transparent !important;}/* 夜间模式遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(2) .menus_item_child {  left: -80px;}.menus_items .menus_item:nth-child(3) .menus_item_child {  left: -80px;}.menus_items .menus_item:nth-child(4) .menus_item_child {  left: -70px;}.menus_items .menus_item:nth-child(5) .menus_item_child {  left: -50px;}.menus_items .menus_item:nth-child(6) .menus_item_child {  left: -30px;}/* 日间模式不生效 */[data-theme="light"] #site-name,[data-theme="light"] #site-title,[data-theme="light"] #site-subtitle,[data-theme="light"] #post-info {  animation: none;}/* 夜间模式生效 */[data-theme="dark"] #site-name,[data-theme="dark"] #site-title {  animation: light_15px 10s linear infinite;}[data-theme="dark"] #site-subtitle {  animation: light_10px 10s linear infinite;}[data-theme="dark"] #post-info {  animation: light_5px 10s linear infinite;}/* 关键帧描述 */@keyframes light_15px {  0% {    text-shadow: #5636ed 0 0 15px;  }  12.5% {    text-shadow: #11ee5e 0 0 15px;  }  25% {    text-shadow: #f14747 0 0 15px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 15px;  }  50% {    text-shadow: #b347f1 0 0 15px;  }  62.5% {    text-shadow: #002afa 0 0 15px;  }  75% {    text-shadow: #ed709b 0 0 15px;  }  87.5% {    text-shadow: #39c5bb 0 0 15px;  }  100% {    text-shadow: #5636ed 0 0 15px;  }}@keyframes light_10px {  0% {    text-shadow: #5636ed 0 0 10px;  }  12.5% {    text-shadow: #11ee5e 0 0 10px;  }  25% {    text-shadow: #f14747 0 0 10px;  }  37.5% {    text-shadow: #f1a247 0 0 10px;  }  50% {    text-shadow: #f1ee47 0 0 10px;  }  50% {    text-shadow: #b347f1 0 0 10px;  }  62.5% {    text-shadow: #002afa 0 0 10px;  }  75% {    text-shadow: #ed709b 0 0 10px;  }  87.5% {    text-shadow: #39c5bb 0 0 10px;  }  100% {    text-shadow: #5636ed 0 0 10px;  }}@keyframes light_5px {  0% {    text-shadow: #5636ed 0 0 5px;  }  12.5% {    text-shadow: #11ee5e 0 0 5px;  }  25% {    text-shadow: #f14747 0 0 5px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 5px;  }  50% {    text-shadow: #b347f1 0 0 5px;  }  62.5% {    text-shadow: #002afa 0 0 5px;  }  75% {    text-shadow: #ed709b 0 0 5px;  }  87.5% {    text-shadow: #39c5bb 0 0 5px;  }  100% {    text-shadow: #5636ed 0 0 5px;  }}/* 夜间模式菜单栏发光字 */[data-theme="dark"] #nav .site-page,[data-theme="dark"] #nav .menus_items .menus_item .menus_item_child li a {  text-shadow: 0 0 2px rgb(179, 71, 241) !important;}/* 手机端适配 */[data-theme="dark"] #sidebar #sidebar-menus .menus_items .site-page {  text-shadow: 0 0 2px rgb(179, 71, 241) !important;}/* 闪烁变动颜色连续渐变 */#site-name,#site-title,#site-subtitle,#post-info,.author-info__name,.author-info__description {  transition: text-shadow 1s linear !important;}/*星空背景*//* 背景宇宙星光  */#universe{  display: block;  position: fixed;  margin: 0;  padding: 0;  border: 0;  outline: 0;  left: 0;  top: 0;  width: 100%;  height: 100%;  pointer-events: none;  /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */  z-index: 1;}/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #262323ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}/* 鼠标样式 */#cursor {  position: fixed;  width: 16px;  height: 16px;  /* 这里改变跟随的底色 */  background: rgb(236, 193, 21);  border-radius: 8px;  opacity: 0.25;  z-index: 10086;  pointer-events: none;  transition: 0.2s ease-in-out;  transition-property: background, opacity, transform;}#cursor.hidden {  opacity: 0;}#cursor.hover {  opacity: 0.6;  transform: scale(2.5);  -webkit-transform: scale(2.5);  -moz-transform: scale(2.5);  -ms-transform: scale(2.5);  -o-transform: scale(2.5);}#cursor.active {  opacity: 0.5;  transform: scale(0.5);  -webkit-transform: scale(0.5);  -moz-transform: scale(0.5);  -ms-transform: scale(0.5);  -o-transform: scale(0.5);}/* 页面样式调节*/:root {  --trans-light: rgba(255, 255, 255, 0.88);  --trans-dark: rgba(25, 25, 25, 0.88);  --border-style: 1px solid rgb(169, 169, 169);  --backdrop-filter: blur(5px) saturate(150%);}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 25px;  border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 18px;  border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#archive {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border: var(--border-style);  border-radius: 20px;}/* 导航栏 */#page-header.nav-fixed #nav {  background: rgba(255, 255, 255, 0.75);  backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {  background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts > .recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page {  background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {  background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {  background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}[data-theme="dark"] .read-mode div#post {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}.pace {  -webkit-pointer-events: none;  pointer-events: none;  -webkit-user-select: none;  -moz-user-select: none;  user-select: none;  z-index: 2000;  position: fixed;  margin: auto;  top: 10px;  left: 0;  right: 0;  height: 8px;  border-radius: 8px;  width: 4rem;  background: #eaecf2;  border: 1px #e3e8f7;  overflow: hidden;}.pace-inactive .pace-progress {  opacity: 0;  transition: 0.3s ease-in;}.pace .pace-progress {  -webkit-box-sizing: border-box;  -moz-box-sizing: border-box;  -ms-box-sizing: border-box;  -o-box-sizing: border-box;  box-sizing: border-box;  -webkit-transform: translate3d(0, 0, 0);  -moz-transform: translate3d(0, 0, 0);  -ms-transform: translate3d(0, 0, 0);  -o-transform: translate3d(0, 0, 0);  transform: translate3d(0, 0, 0);  max-width: 200px;  position: absolute;  z-index: 2000;  display: block;  top: 0;  right: 100%;  height: 100%;  width: 100%;  background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);  animation: gradient 1.5s ease infinite;  background-size: 200%;}.pace.pace-inactive {  opacity: 0;  transition: 0.3s;  top: -8px;}@keyframes gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 标签引入 *//* 文章页H1-H6图标样式效果 *//* 控制风车转动速度 4s那里可以自己调节快慢 */h1::before,h2::before,h3::before,h4::before,h5::before,h6::before {  -webkit-animation: ccc 4s linear infinite;  animation: ccc 4s linear infinite;}/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */@-webkit-keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}@keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}/* 设置风车颜色 */#content-inner.layout h1::before {  color: #ef50a8;  margin-left: -1.55rem;  font-size: 1.3rem;  margin-top: -0.23rem;}#content-inner.layout h2::before {  color: #fb7061;  margin-left: -1.35rem;  font-size: 1.1rem;  margin-top: -0.12rem;}#content-inner.layout h3::before {  color: #ffbf00;  margin-left: -1.22rem;  font-size: 0.95rem;  margin-top: -0.09rem;}#content-inner.layout h4::before {  color: #a9e000;  margin-left: -1.05rem;  font-size: 0.8rem;  margin-top: -0.09rem;}#content-inner.layout h5::before {  color: #57c850;  margin-left: -0.9rem;  font-size: 0.7rem;  margin-top: 0rem;}#content-inner.layout h6::before {  color: #5ec1e0;  margin-left: -0.9rem;  font-size: 0.66rem;  margin-top: 0rem;}/* s设置风车hover动效 6s那里可以自己调节快慢*/#content-inner.layout h1:hover,#content-inner.layout h2:hover,#content-inner.layout h3:hover,#content-inner.layout h4:hover,#content-inner.layout h5:hover,#content-inner.layout h6:hover {  color: var(--theme-color);}#content-inner.layout h1:hover::before,#content-inner.layout h2:hover::before,#content-inner.layout h3:hover::before,#content-inner.layout h4:hover::before,#content-inner.layout h5:hover::before,#content-inner.layout h6:hover::before {  color: var(--theme-color);  -webkit-animation: ccc 6s linear infinite;  animation: ccc 6s linear infinite;}/* 设置文字内容 :nth-child(1)的作用是选择第几个 */.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(1):before {  content: '输入QQ号会自动获取昵称和头像🐧';}.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(2):before {  content: '收到回复将会发送到您的邮箱📧';}.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(3):before {  content: '可以通过昵称访问您的网站🔗';}/* 当用户点击输入框时显示 */.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::before,.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::after {  display: block;}/* 主内容区 */.el-input.el-input--small.el-input-group.el-input-group--prepend::before {  /* 先隐藏起来 */  display: none;  /* 绝对定位 */  position: absolute;  /* 向上移动60像素 */  top: -60px;  /* 文字强制不换行，防止left:50%导致的文字换行 */  white-space: nowrap;  /* 圆角 */  border-radius: 10px;  /* 距离左边50% */  left: 50%;  /* 然后再向左边挪动自身的一半，即可实现居中 */  transform: translate(-50%);  /* 填充 */  padding: 14px 18px;  background: #444;  color: #fff;}/* 小角标 */.el-input.el-input--small.el-input-group.el-input-group--prepend::after {  display: none;  content: '';  position: absolute;  /* 内容大小（宽高）为0且边框大小不为0的情况下，每一条边（4个边）都是一个三角形，组成一个正方形。  我们先将所有边框透明，再给其中的一条边添加颜色就可以实现小三角图标 */  border: 12px solid transparent;  border-top-color: #444;  left: 50%;  transform: translate(-50%, -48px);}/* 欢迎信息 */#welcome-info {  background: linear-gradient(45deg, #b9f4f3, #e3fbf9);  border-radius: 18px;  padding: 8px;}[data-theme="dark"] #welcome-info {  background: #212121;}/* loading动画 */.pace {  -webkit-pointer-events: none;  pointer-events: none;  -webkit-user-select: none;  -moz-user-select: none;  user-select: none;  z-index: 2000;  position: fixed;  margin: auto;  top: 10px;  left: 0;  right: 0;  height: 8px;  border-radius: 8px;  width: 4rem;  background: #eaecf2;  border: 1px #e3e8f7;  overflow: hidden;}.pace-inactive .pace-progress {  opacity: 0;  transition: 0.3s ease-in;}.pace .pace-progress {  -webkit-box-sizing: border-box;  -moz-box-sizing: border-box;  -ms-box-sizing: border-box;  -o-box-sizing: border-box;  box-sizing: border-box;  -webkit-transform: translate3d(0, 0, 0);  -moz-transform: translate3d(0, 0, 0);  -ms-transform: translate3d(0, 0, 0);  -o-transform: translate3d(0, 0, 0);  transform: translate3d(0, 0, 0);  max-width: 200px;  position: absolute;  z-index: 2000;  display: block;  top: 0;  right: 100%;  height: 100%;  width: 100%;  background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);  animation: gradient 1.5s ease infinite;  background-size: 200%;}.pace.pace-inactive {  opacity: 0;  transition: 0.3s;  top: -8px;}@keyframes gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}.loading-img {  background: url(/img/头像.jpg) no-repeat center center;  background-size: cover;}/* 右键菜单 */#rightMenu {  display: none;  position: fixed;  width: 160px;  height: fit-content;  top: 10%;  left: 10%;    /* 菜单面板背景色 */  background-color: var(--card-bg);    /* 菜单面板文字颜色 */  border: 1px solid var(--font-color);  border-radius: 8px;  z-index: 100;}#rightMenu .rightMenu-group {  padding: 7px 6px;}#rightMenu .rightMenu-group:not(:nth-last-child(1)) {  border-bottom: 1px solid var(--font-color);}#rightMenu .rightMenu-group.rightMenu-small {  display: flex;  justify-content: space-between;}#rightMenu .rightMenu-group .rightMenu-item {  height: 30px;  line-height: 30px;  border-radius: 8px;  transition: 0.3s;  color: var(--font-color);}#rightMenu .rightMenu-group.rightMenu-line .rightMenu-item {  display: flex;  height: 40px;  line-height: 40px;  padding: 0 4px;}#rightMenu .rightMenu-group .rightMenu-item:hover {    /* 鼠标悬浮选项颜色 */  background-color: var(--text-bg-hover);}#rightMenu .rightMenu-group .rightMenu-item i {  display: inline-block;  text-align: center;  line-height: 30px;  width: 30px;  height: 30px;  padding: 0 5px;}#rightMenu .rightMenu-group .rightMenu-item span {  line-height: 30px;}#rightMenu .rightMenu-group.rightMenu-line .rightMenu-item * {  height: 40px;  line-height: 36px;}.rightMenu-group.hide {  display: none;}/* 宽屏自适应 *//* 全局宽度 */.layout {  max-width: 1400px;}/* 侧边卡片栏宽度 */.aside-content {  max-width: 318px;  min-width: 300px;}/* 平板尺寸自适应(不启用侧边栏宽度限制) */@media screen and (max-width: 900px) {  .aside-content {    max-width: none !important;    padding: 0.5px 0.5px;  }} *//* 除了首页以外其他页面隐藏卡片，并采用宽屏显示 */#archive,#page,#category,#tag {  width: 100%;}.page:not(.page.home) .aside-content {  display: none;}/* 页脚 *//* tzy页脚样式 */#ft {  max-width: 1200px;  margin: 0 auto 12px;  display: flex;  color: rgb(255 255 255 / 80%) !important;  text-align: left;  flex-wrap: wrap;}.ft-item-1,.ft-item-2 {  display: flex;  height: 100%;  padding: 2px 14px;}.ft-item-1 {  flex-direction: column;  flex: 2;}.ft-item-2 {  flex: 1;  flex-direction: column;}.t-top {  display: flex;}.t-top .t-t-l {  display: flex;  flex-direction: column;  flex: 1.4;  margin-right: 10px;}.t-top .t-t-l .bg-ad {  width: 85%;  border-radius: 10px;  padding: 0 10px;}.btn-xz-box {  margin-top: 10px;}/* 按钮背景颜色等 */.btn-xz {  display: block;  background-color: var(--btn-bg);  color: var(--btn-color);  text-align: center;  line-height: 2.4;  margin: 8px 0;}.btn-xz:hover {  text-decoration: none !important;}/* 按钮悬浮颜色 */.btn-xz-box:hover .btn-xz {  background-color: var(--text-bg-hover);}.t-top .t-t-r {  display: flex;  flex-direction: column;  flex: 1;}.ft-links {  padding: 0 14px;  list-style: none;  margin-top: 0 !important;}.ft-links li a {  display: inline-block !important;  width: 50%;}/* 链接悬浮颜色 */.ft-links li a:hover {  text-decoration: none !important;  color: var(--theme-color) !important;}.ft-item-2 .ft-img-group {  width: 100%;}.ft-t {  font-size: 1.1rem;  margin-bottom: 20px;  line-height: 1;  font-weight: 600;}.t-l-t {  padding-left: 14px;}.ft-item-2 .ft-img-group .img-group-item {  display: inline-block;  width: 18.4%;  margin-right: 14px;  margin-bottom: 6px;}.ft-item-2 .ft-img-group .img-group-item a {  display: inline-block;  width: 100%;  height: 100%;}.ft-item-2 .ft-img-group .img-group-item a img {  width: 100%;  max-height: 80px;  border-radius: 10px;}/* 头像悬浮颜色框 */.ft-item-2 .ft-img-group .img-group-item a img:hover {  border: 2px solid var(--theme-color);}@media screen and (max-width: 768px) {  .ft-item-1 {    flex-basis: 100% !important;  }  .ft-item-2 {    flex-basis: 100% !important;  }  .t-top .t-t-l .bg-ad {    width: 100%;  }}@media screen and (max-width: 576px) {  .t-top {    flex-wrap: wrap;  }  .t-top .t-t-l {    flex-basis: 100% !important;  }  .t-top .t-t-r {    margin-top: 16px;    flex-basis: 100% !important;  }}#footer-wrap a {  border-radius: 30px;}#footer-wrap {  padding: 20px 20px;}/* 页脚心跳动画 */#heartbeat {  color: red;  animation: iconAnimate 1s ease-in-out infinite;}@-moz-keyframes iconAnimate {  0%,  100% {    transform: scale(1);  }  10%,  30% {    transform: scale(0.9);  }  20%,  40%,  60%,  80% {    transform: scale(1.1);  }  50%,  70% {    transform: scale(1.1);  }}@-webkit-keyframes iconAnimate {  0%,  100% {    transform: scale(1);  }  10%,  30% {    transform: scale(0.9);  }  20%,  40%,  60%,  80% {    transform: scale(1.1);  }  50%,  70% {    transform: scale(1.1);  }}@-o-keyframes iconAnimate {  0%,  100% {    transform: scale(1);  }  10%,  30% {    transform: scale(0.9);  }  20%,  40%,  60%,  80% {    transform: scale(1.1);  }  50%,  70% {    transform: scale(1.1);  }}@keyframes iconAnimate {  0%,  100% {    transform: scale(1);  }  10%,  30% {    transform: scale(0.9);  }  20%,  40%,  60%,  80% {    transform: scale(1.1);  }  50%,  70% {    transform: scale(1.1);  }}/*头像下图标 */.card-info-avatar .author-status-box {  position: absolute;  bottom: 0;  left: calc(100% - 28px);  width: 28px;  height: 28px;  border: 1px solid #d0d7de;  border-radius: 2em;  background-color: #f8f8f8f8;  transition: 0.4s;  overflow: hidden;}[data-theme="dark"] .card-info-avatar .author-status-box {  background-color: #222222f2;  border: 1px solid #5c6060;}.card-info-avatar .author-status-box .author-status {  display: flex;  align-items: center;  justify-content: center;  height: 28px;  padding: 0 5px;}.card-info-avatar .author-status-box:hover {  width: 105px;}.card-info-avatar .author-status-box:hover .author-status span {  width: 105px;  margin-left: 4px;}.card-info-avatar .author-status-box .author-status span {  width: 0;  font-size: 12px;  height: 100%;  overflow: hidden;  text-overflow: ellipsis;  white-space: nowrap;  transition: 0.4s;}.card-widget .card-info-avatar {  display: inline-block;  position: relative;}/* 头像呼吸灯 */[data-theme="light"] .avatar-img {  animation: huxi_light 4s ease-in-out infinite;}[data-theme="dark"] .avatar-img {  animation: huxi_dark 4s ease-in-out infinite;}@keyframes huxi_light {  0% {    box-shadow: 0px 0px 1px 1px #e9f5fa;  }  50% {    box-shadow: 0px 0px 5px 5px #e9f5fa;  }  100% {    box-shadow: 0px 0px 1px 1px #e9f5fa;  }}@keyframes huxi_dark {  0% {    box-shadow: 0px 0px 1px 1px #39c5bb;  }  50% {    box-shadow: 0px 0px 5px 5px #39c5bb;  }  100% {    box-shadow: 0px 0px 1px 1px #39c5bb;  }}/* 帧率检测 */#fps {  position: fixed;  /* 指定位置 */  left: 10px;  bottom: 10px;  z-index: 1919810;}[data-theme="light"] #fps {  background-color: rgba(255, 255, 255, 0.85);  backdrop-filter: var(--backdrop-filter);  padding: 4px;  border-radius: 4px;}[data-theme="dark"] #fps {  background-color: rgba(0, 0, 0, 0.72);  backdrop-filter: var(--backdrop-filter);  padding: 4px;  border-radius: 4px;}/* 滚动条样式 */::-webkit-scrollbar {  width: 8px;  height: 8px;}::-webkit-scrollbar-track {  background-color: rgba(73, 177, 245, 0.2);  border-radius: 2em;}::-webkit-scrollbar-thumb {  background-color: var(--theme-color);  background-image: -webkit-linear-gradient(    45deg,    rgba(255, 255, 255, 0.4) 25%,    transparent 25%,    transparent 50%,    rgba(255, 255, 255, 0.4) 50%,    rgba(255, 255, 255, 0.4) 75%,    transparent 75%,    transparent  );  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: var(--theme-color);}/* 倒计时 *//* 新年侧边栏 */#newYear {  color: white;  padding: 0 !important;}#newYear p,#newYear h3 {  font-weight: normal;  color: inherit;  margin: 0;}#newYear .item-headline {  display: none;}#newYear-main {  min-height: 160px;  padding: 1rem;  position: relative;  border-radius: 12px;  background-image: url(https://tuchuang.voooe.cn/images/2023/01/02/tunian.webp);  background-size: cover;  background-position: center;}#newYear-main * {  position: relative;  line-height: 1.3;}#newYear-main .newYear-time {  font-weight: bold;  text-align: center;}#newYear-main .time,#newYear-main .happyNewYear {  font-size: 3.5rem;  margin: 1rem 0;  display: block;}#newYear-main .day {  font-size: 5rem;}#newYear-main .day .unit {  font-size: 1rem;}#newYear-main .mask {  position: absolute;  left: 0;  top: 0;  height: 100%;  width: 100%;  background-color: rgba(0, 0, 0, .1);}/* 文章头波浪线 *//* 波浪css */.main-hero-waves-area {  width: 100%;  position: absolute;  left: 0;  bottom: -11px;  z-index: 5;}.waves-area .waves-svg {  width: 100%;  height: 5rem;}/* Animation */.parallax > use {  animation: move-forever 25s cubic-bezier(0.55, 0.5, 0.45, 0.5) infinite;}.parallax > use:nth-child(1) {  animation-delay: -2s;  animation-duration: 7s;  fill: #f7f9febd;}.parallax > use:nth-child(2) {  animation-delay: -3s;  animation-duration: 10s;  fill: #f7f9fe82;}.parallax > use:nth-child(3) {  animation-delay: -4s;  animation-duration: 13s;  fill: #f7f9fe36;}.parallax > use:nth-child(4) {  animation-delay: -5s;  animation-duration: 20s;  fill: #f7f9fe;}/* 黑色模式背景 */[data-theme="dark"] .parallax > use:nth-child(1) {  animation-delay: -2s;  animation-duration: 7s;  fill: #18171dc8;}[data-theme="dark"] .parallax > use:nth-child(2) {  animation-delay: -3s;  animation-duration: 10s;  fill: #18171d80;}[data-theme="dark"] .parallax > use:nth-child(3) {  animation-delay: -4s;  animation-duration: 13s;  fill: #18171d3e;}[data-theme="dark"] .parallax > use:nth-child(4) {  animation-delay: -5s;  animation-duration: 20s;  fill: #18171d;}@keyframes move-forever {  0% {    transform: translate3d(-90px, 0, 0);  }  100% {    transform: translate3d(85px, 0, 0);  }}/*Shrinking for mobile*/@media (max-width: 768px) {  .waves-area .waves-svg {    height: 40px;    min-height: 40px;  }}/* 表情放大 */#owo-big {  position: fixed;  align-items: center;  background-color: rgb(255, 255, 255);  border: 1px #aaa solid;  border-radius: 10px;  z-index: 9999;  display: none;  transform: translate(0, -105%);  overflow: hidden;  animation: owoIn 0.3s cubic-bezier(0.42, 0, 0.3, 1.11);}[data-theme=dark] #owo-big {  background-color: #4a4a4a}#owo-big img {  width: 100%;}/* 动画效果代码由 Heo：https://blog.zhheo.com/ 提供 */@keyframes owoIn {  0% {      transform: translate(0, -95%);      opacity: 0;  }  100% {      transform: translate(0, -105%);      opacity: 1;  }}/* 引入图标 *//* svg.icon {  width: 1.28em;  height: 1.28em;  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;} */svg.social_icon {  width: 1.28em;  height: 1.28em;  vertical-align: -0.1em;  fill: currentColor;  overflow: hidden;}svg.menu_icon {  width: 1.36em;  height: 1.36em;  vertical-align: -0.1em;  fill: currentColor;  overflow: hidden;}/* tags样式 */#aside-content .card-tag-cloud a {  color: var(--anzhiyu-fontcolor) !important;  font-size: 1.05rem !important;  border-radius: 8px;  display: inline-block;  margin-right: 4px;}#aside-content .card-tag-cloud a:hover {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-white) !important;  box-shadow: var(--anzhiyu-shadow-theme);}@media screen and (min-width: 1300px) {  #aside-content .card-tag-cloud a:hover {    transform: scale(1.03);  }  #aside-content .card-tag-cloud a:active {    transform: scale(0.97);  }}#aside-content .card-tag-cloud a sup {  opacity: 0.4;  margin-left: 2px;}/* 归档生肖大小 */svg.icon {  /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */   width: 1em; height: 1em;   /* width和height定义图标的默认宽度和高度*/   vertical-align: -0.15em;   fill: currentColor;   overflow: hidden;}/* 全局默认鼠标指针 */body,html{  cursor: url('https://npm.elemecdn.com/akilar-candyassets/image/cur/arrow.cur'),auto !important;}/* 悬停图片时的鼠标指针 */img{  cursor: url('https://npm.elemecdn.com/akilar-candyassets/image/cur/btn.cur'),auto !important;}/* 选择链接标签时的鼠标指针 */a:hover{    cursor: url('https://npm.elemecdn.com/akilar-candyassets/image/cur/link.cur'),auto;}/* 选中输入框时的鼠标指针 */input:hover{    cursor: url('https://npm.elemecdn.com/akilar-candyassets/image/cur/input.cur'),auto;}/* 悬停按钮时的鼠标指针 */button:hover{    cursor: url('https://npm.elemecdn.com/akilar-candyassets/image/cur/btn.cur'),auto;}/* 悬停列表标签时的鼠标指针 */i:hover{    cursor: url('https://npm.elemecdn.com/akilar-candyassets/image/cur/link.cur'),auto;}/* 悬停页脚链接标签（例如页脚徽标）时的鼠标指针 */#footer-wrap a:hover{      cursor: url('https://npm.elemecdn.com/akilar-candyassets/image/cur/hf.cur'),auto;}/* 悬停页码时的鼠标指针 */#pagination .page-number:hover{      cursor: url('https://npm.elemecdn.com/akilar-candyassets/image/cur/i.cur'),auto;}/* 悬停菜单栏时的鼠标指针 */#nav .site-page:hover{      cursor: url('https://npm.elemecdn.com/akilar-candyassets/image/cur/hf.cur'),auto;}/* apply吸底音乐 */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {  left: -66px !important;  /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {  left: 0 !important;  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.swiper-button-next:after, .swiper-button-prev:after{  color:#ffa666!important; /*自己改*/}/* twikoo评论美化 *//* 自定义twikoo评论输入框高度 */#twikoo .el-textarea textarea {  min-height: 120px !important;  background-size: 90px;}/* 自定义表情优化 */#twikoo .OwO-body {  max-width: 100% !important;}/* 选择某个框 #twikoo .OwO .OwO-body .OwO-items:nth-child(1) */#twikoo .OwO .OwO-body .OwO-items {  max-height: 250px !important;}.OwO .OwO-body .OwO-items-image .OwO-item {  max-width: calc(9% - 10px);  box-sizing: content-box;}.OwO .OwO-body .OwO-items-image .OwO-item[title|="Heybox"],.OwO .OwO-body .OwO-items-image .OwO-item[title|="Tieba"],.OwO .OwO-body .OwO-items-show .OwO-item[title*="bilibili"] {  max-width: calc(7% - 10px) !important;  box-sizing: content-box;}#twikoo .OwO-items li img {  width: 100% !important;}.tk-comment .vemoji[alt|="Menhera"],.tk-comment .tk-owo-emotion[alt*="Menhera"],.tk-comment .vemoji[alt|="Snow"],.tk-comment .tk-owo-emotion[alt*="Snow"],.tk-comment .vemoji[alt|="Sweetie"],.tk-comment .tk-owo-emotion[alt*="Sweetie"],.tk-comment .vemoji[alt|="Tsuri"],.tk-comment .tk-owo-emotion[alt*="Tsuri"],.tk-comment .vemoji[alt|="Yurui"],.tk-comment .tk-owo-emotion[alt*="Yurui"] {  max-width: 120px !important;  max-height: 120px !important;  width: 120px;  margin: 8px 1px;  display: block !important;}/* 手机端适配 */@media screen and (max-width: 768px) {  .tk-comment .vemoji[alt|="Menhera"],  .tk-comment .tk-owo-emotion[alt*="Menhera"],  .tk-comment .vemoji[alt|="Snow"],  .tk-comment .tk-owo-emotion[alt*="Snow"],  .tk-comment .vemoji[alt|="Sweetie"],  .tk-comment .tk-owo-emotion[alt*="Sweetie"],  .tk-comment .vemoji[alt|="Tsuri"],  .tk-comment .tk-owo-emotion[alt*="Tsuri"],  .tk-comment .vemoji[alt|="Yurui"],  .tk-comment .tk-owo-emotion[alt*="Yurui"] {    max-width: calc(100% - 30px) !important;    max-height: calc(100% - 30px) !important;  }  .OwO .OwO-body .OwO-items-image .OwO-item[title*="Menhera"],  .OwO .OwO-body .OwO-items-image .OwO-item[title*="Snow"],  .OwO .OwO-body .OwO-items-image .OwO-item[title*="Sweetie"],  .OwO .OwO-body .OwO-items-image .OwO-item[title*="Tsuri"],  .OwO .OwO-body .OwO-items-image .OwO-item[title*="Yurui"] {    max-width: calc(33% - 10px);    box-sizing: border-box;  }  .OwO .OwO-body .OwO-items-image .OwO-item[title*="Heybox"],  .OwO .OwO-body .OwO-items-image .OwO-item[title*="bilibili"],  .OwO .OwO-body .OwO-items-image .OwO-item[title*="Tieba"],  .OwO .OwO-body .OwO-items-image .OwO-item[title*="QQ"] {    max-width: calc(18% - 10px) !important;    box-sizing: content-box;  }}/* 右下角闭眼 */.el-textarea__inner {  background-image: url(https://tuchuang.voooe.cn/images/2023/01/02/open.webp) !important;}.el-textarea__inner:focus {  background-image: url(https://tuchuang.voooe.cn/images/2023/01/02/close.webp) !important;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/copymessage.js"/>
      <url>/js/copymessage.js</url>
      
        <content type="html"><![CDATA[new Vue({    data: function () {        this.$notify({            // notify: message,            title: "欢迎光临😜",            message: "程序员，在扒源码也记住要遵循GPL协议哦！",            position: 'top-left',            offset: 50,            showClose: true,            type: "warning",            duration: 5000        });    }})]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cursor.js"/>
      <url>/js/cursor.js</url>
      
        <content type="html"><![CDATA[var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle = (el, attr) => {    try {        return window.getComputedStyle            ? window.getComputedStyle(el)[attr]            : el.currentStyle[attr];    } catch (e) {}    return "";};class Cursor {    constructor() {        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    move(left, top) {        this.cursor.style["left"] = `${left}px`;        this.cursor.style["top"] = `${top}px`;    }    create() {        if (!this.cursor) {            this.cursor = document.createElement("div");            this.cursor.id = "cursor";            this.cursor.classList.add("hidden");            document.body.append(this.cursor);        }        var el = document.getElementsByTagName('*');        for (let i = 0; i < el.length; i++)            if (getStyle(el[i], "cursor") == "pointer")                this.pt.push(el[i].outerHTML);        document.body.appendChild((this.scr = document.createElement("style")));        // 这里改变鼠标指针的颜色 由svg生成        this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 8 8" width="8px" height="8px"><circle cx="4" cy="4" r="4" opacity="1.0" fill="rgb(57, 197, 187)"/></svg>") 4 4, auto}`;    }    refresh() {        this.scr.remove();        this.cursor.classList.remove("hover");        this.cursor.classList.remove("active");        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    init() {        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove("hidden");};        document.onmouseenter = e => this.cursor.classList.remove("hidden");        document.onmouseleave = e => this.cursor.classList.add("hidden");        document.onmousedown  = e => this.cursor.classList.add("active");        document.onmouseup    = e => this.cursor.classList.remove("active");    }    render() {        if (this.pos.prev) {            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);            this.move(this.pos.prev.x, this.pos.prev.y);        } else {            this.pos.prev = this.pos.curr;        }        requestAnimationFrame(() => this.render());    }}(() => {    CURSOR = new Cursor();    // 需要重新获取列表时，使用 CURSOR.refresh()})();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/light.js"/>
      <url>/js/light.js</url>
      
        <content type="html"><![CDATA[// 霓虹灯效果// 颜色数组var arr = ["#39c5bb", "#f14747", "#f1a247", "#f1ee47", "#b347f1", "#1edbff", "#ed709b", "#5636ed"];// 颜色索引var idx = 0;// 切换颜色function changeColor() {    // 仅夜间模式才启用    if (document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark') {        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = arr[idx] + " 0 0 10px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = arr[idx] + " 0 0 5px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = arr[idx] + " 0 0 12px";            document.getElementsByClassName("author-info__description")[0].style.textShadow = arr[idx] + " 0 0 12px";        } catch {                    }        idx++;        if (idx == 8) {            idx = 0;        }    } else {        // 白天模式恢复默认        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = "#1e1e1ee0 1px 1px 1px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = "";            document.getElementsByClassName("author-info__description")[0].style.textShadow = "";        } catch {                    }    }}// 开启计时器window.onload = setInterval(changeColor, 1200);// 防抖全局计时器let TT = null;    //time用来控制事件的触发// 防抖函数:fn->逻辑 time->防抖时间function debounce(fn, time) {    if (TT !== null) clearTimeout(TT);    TT = setTimeout(fn, time);}// 复制提醒document.addEventListener("copy", function () {    debounce(function () {        new Vue({            data: function () {                this.$notify({                    title: "嘿嘿！复制成功🍬",                    message: "若要转载请加上原文链接哦，谢谢支持！",                    position: 'top-left',                    offset: 50,                    showClose: true,                    type: "success",                    duration: 5000                });            }        })    }, 300);})function switchPostChart () {    // 这里为了统一颜色选取的是“明暗模式”下的两种字体颜色，也可以自己定义    let color = document.documentElement.getAttribute('data-theme') === 'light' ? '#4C4948' : 'rgba(255,255,255,0.7)'    if (document.getElementById('posts-chart') && postsOption) {      try {        let postsOptionNew = postsOption        postsOptionNew.title.textStyle.color = color        postsOptionNew.xAxis.nameTextStyle.color = color        postsOptionNew.yAxis.nameTextStyle.color = color        postsOptionNew.xAxis.axisLabel.color = color        postsOptionNew.yAxis.axisLabel.color = color        postsOptionNew.xAxis.axisLine.lineStyle.color = color        postsOptionNew.yAxis.axisLine.lineStyle.color = color        postsOptionNew.series[0].markLine.data[0].label.color = color        postsChart.setOption(postsOptionNew)      } catch (error) {        console.log(error)      }    }    if (document.getElementById('tags-chart') && tagsOption) {      try {        let tagsOptionNew = tagsOption        tagsOptionNew.title.textStyle.color = color        tagsOptionNew.xAxis.nameTextStyle.color = color        tagsOptionNew.yAxis.nameTextStyle.color = color        tagsOptionNew.xAxis.axisLabel.color = color        tagsOptionNew.yAxis.axisLabel.color = color        tagsOptionNew.xAxis.axisLine.lineStyle.color = color        tagsOptionNew.yAxis.axisLine.lineStyle.color = color        tagsOptionNew.series[0].markLine.data[0].label.color = color        tagsChart.setOption(tagsOptionNew)      } catch (error) {        console.log(error)      }    }    if (document.getElementById('categories-chart') && categoriesOption) {      try {        let categoriesOptionNew = categoriesOption        categoriesOptionNew.title.textStyle.color = color        categoriesOptionNew.legend.textStyle.color = color        if (!categoryParentFlag) { categoriesOptionNew.series[0].label.color = color }        categoriesChart.setOption(categoriesOptionNew)      } catch (error) {        console.log(error)      }    }  }  document.getElementById("mode-button").addEventListener("click", function () { setTimeout(switchPostChart, 100) })]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date();function createtime() {  // 当前时间  now.setTime(now.getTime() + 1000);  var start = new Date("01/01/2023 00:00:00"); // 旅行者1号开始计算的时间  var dis = Math.trunc(23400000000 + ((now - start) / 1000) * 17); // 距离=秒数*速度 记住转换毫秒  var unit = (dis / 149600000).toFixed(6);  // 天文单位  var grt = new Date("01/01/2023 00:00:00");// 网站诞生时间  var days = (now - grt) / 1e3 / 60 / 60 / 24,    dnum = Math.floor(days),    hours = (now - grt) / 1e3 / 60 / 60 - 24 * dnum,    hnum = Math.floor(hours);  1 == String(hnum).length && (hnum = "0" + hnum);  var minutes = (now - grt) / 1e3 / 60 - 1440 * dnum - 60 * hnum,    mnum = Math.floor(minutes);  1 == String(mnum).length && (mnum = "0" + mnum);  var seconds = (now - grt) / 1e3 - 86400 * dnum - 3600 * hnum - 60 * mnum,    snum = Math.round(seconds);  1 == String(snum).length && (snum = "0" + snum);  let currentTimeHtml = "";  (currentTimeHtml =    hnum < 18 && hnum >= 9    ? `<img class="boardsign" src="https://sourcebucket.s3.ladydaily.com/badge/F小屋-科研摸鱼中.svg" title="什么时候才能追求生活的自由~"><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${dnum} 天 ${hnum} 小时 ${mnum} 分 ${snum} 秒 <i id="heartbeat" class="fas fa-heartbeat"></i> <br> 旅行者 1 号当前距离地球 ${dis} 千米，约为 ${unit} 个天文单位 🚀</div>`    : `<img class="boardsign" src="https://sourcebucket.s3.ladydaily.com/badge/F小屋-下班休息啦.svg" title="下班了就该和家人一起放松休息玩耍~"><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${dnum} 天 ${hnum} 小时 ${mnum} 分 ${snum} 秒 <i id="heartbeat" class="fas fa-heartbeat"></i> <br> 旅行者 1 号当前距离地球 ${dis} 千米，约为 ${unit} 个天文单位 🚀</div>`),    document.getElementById("workboard") &&    (document.getElementById("workboard").innerHTML = currentTimeHtml);}// 设置重复执行函数，周期1000mssetInterval(() => {  createtime();}, 1000);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime1.js"/>
      <url>/js/runtime1.js</url>
      
        <content type="html"><![CDATA[setInterval(() => {  let create_time = Math.round(new Date('2019-04-17 00:00:00').getTime() / 1000); //在此行修改建站时间  let timestamp = Math.round((new Date().getTime()) / 1000);  let second = timestamp - create_time;  let time = new Array(0, 0, 0, 0, 0);  var nol = function(h){    return h>9?h:'0'+h;  }  if (second >= 365 * 24 * 3600) {    time[0] = parseInt(second / (365 * 24 * 3600));    second %= 365 * 24 * 3600;  }  if (second >= 24 * 3600) {    time[1] = parseInt(second / (24 * 3600));    second %= 24 * 3600;  }  if (second >= 3600) {    time[2] = nol(parseInt(second / 3600));    second %= 3600;  }  if (second >= 60) {    time[3] = nol(parseInt(second / 60));    second %= 60;  }  if (second > 0) {    time[4] = nol(second);  }  if ((Number(time[2])<22) && (number(time[2])>7)){    currentTimeHtml ="<img class="boardsign" src="https://img.shields.io/badge/糖果屋-营业中-6adea8?style=social&logo=cakephp" title="距离百年老店也就差不到一百年~"><div id="runtime">" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  else{    currentTimeHtml ="<img class="boardsign" src="https://img.shields.io/badge/糖果屋-打烊了-6adea8?style=social&logo=coffeescript" title="这个点了应该去睡觉啦，熬夜对身体不好哦"><div id="runtime">" + time[0] + ' YEAR ' + time[1] + ' DAYS ' + time[2] + ' : ' + time[3] + ' : ' + time[4] + '</div>';  }  document.getElementById("workboard").innerHTML = currentTimeHtml;}, 1000);</22)>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/sakura.js"/>
      <url>/js/sakura.js</url>
      
        <content type="html"><![CDATA[var stop, staticx;var img = new Image();// 将引入的图片文件替换为你想要的即可img.src = "https://img.cdn.nesxc.com/upload/wordpress/202202251325420webp";function Sakura(x, y, s, r, fn) {    this.x = x;    this.y = y;    this.s = s;    this.r = r;    this.fn = fn}Sakura.prototype.draw = function (cxt) {    cxt.save();    var xc = 20 * this.s / 2;    cxt.translate(this.x, this.y);    cxt.rotate(this.r);    cxt.drawImage(img, 0, 0, 20 * this.s, 20 * this.s);    cxt.restore()};Sakura.prototype.update = function () {    this.x = this.fn.x(this.x, this.y);    this.y = this.fn.y(this.y, this.y);    this.r = this.fn.r(this.r);    if (this.x > window.innerWidth || this.x < 0 || this.y > window.innerHeight || this.y < 0) {        this.r = getRandom("fnr");        if (Math.random() > 0.4) {            this.x = getRandom("x");            this.y = 0;            this.s = getRandom("s");            this.r = getRandom("r")        } else {            this.x = window.innerWidth;            this.y = getRandom("y");            this.s = getRandom("s");            this.r = getRandom("r")        }    }};SakuraList = function () {    this.list = []};SakuraList.prototype.push = function (sakura) {    this.list.push(sakura)};SakuraList.prototype.update = function () {    for (var i = 0, len = this.list.length; i < len; i++) {        this.list[i].update()    }};SakuraList.prototype.draw = function (cxt) {    for (var i = 0, len = this.list.length; i < len; i++) {        this.list[i].draw(cxt)    }};SakuraList.prototype.get = function (i) {    return this.list[i]};SakuraList.prototype.size = function () {    return this.list.length};function getRandom(option) {    var ret, random;    switch (option) {        case "x":            ret = Math.random() * window.innerWidth;            break;        case "y":            ret = Math.random() * window.innerHeight;            break;        case "s":            ret = Math.random();            break;        case "r":            ret = Math.random() * 4;            break;        case "fnx":            random = -0.5 + Math.random() * 1;            ret = function (x, y) {                return x + 0.5 * random - 1.7            };            break;        case "fny":            random = 1.5 + Math.random() * 0.7;            ret = function (x, y) {                return y + random            };            break;        case "fnr":            random = Math.random() * 0.03;            ret = function (r) {                return r + random            };            break    }    return ret}function startSakura() {    requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame;    var canvas = document.createElement("canvas"),        cxt;    staticx = true;    canvas.height = window.innerHeight;    canvas.width = window.innerWidth;    canvas.setAttribute("style", "position: fixed;left: 0;top: 0;pointer-events: none;");    canvas.setAttribute("id", "canvas_sakura");    document.getElementsByTagName("body")[0].appendChild(canvas);    cxt = canvas.getContext("2d");    var sakuraList = new SakuraList();    for (var i = 0; i < 50; i++) {        var sakura, randomX, randomY, randomS, randomR, randomFnx, randomFny;        randomX = getRandom("x");        randomY = getRandom("y");        randomR = getRandom("r");        randomS = getRandom("s");        randomFnx = getRandom("fnx");        randomFny = getRandom("fny");        randomFnR = getRandom("fnr");        sakura = new Sakura(randomX, randomY, randomS, randomR, {            x: randomFnx,            y: randomFny,            r: randomFnR        });        sakura.draw(cxt);        sakuraList.push(sakura)    }    stop = requestAnimationFrame(function () {        cxt.clearRect(0, 0, canvas.width, canvas.height);        sakuraList.update();        sakuraList.draw(cxt);        stop = requestAnimationFrame(arguments.callee)    })}window.onresize = function () {    var canvasSnow = document.getElementById("canvas_snow")};img.onload = function () {    startSakura()};function stopp() {    if (staticx) {        var child = document.getElementById("canvas_sakura");        child.parentNode.removeChild(child);        window.cancelAnimationFrame(stop);        staticx = false    } else {        startSakura()    }};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友联</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<div class="addBtn"><button onclick="leonus.linkCom()"><i class="fa-solid fa-circle-plus"></i>快速申请 (默认样式)</button> <button onclick="leonus.linkCom(&quot;bf&quot;)"><i class="fa-solid fa-circle-plus"></i>快速申请 (Butterfly)</button></div><link rel="stylesheet" href="/css/kslink.css"><script src="/js/kslink.js"></script>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/share.js"/>
      <url>/js/share.js</url>
      
        <content type="html"><![CDATA[// 分享本页function share_() {    let url = window.location.origin + window.location.pathname    try {        // 截取标题        var title = document.title;        var subTitle = title.endsWith("| FloatingDream1001") ? title.substring(0, title.length - 14) : title;        navigator.clipboard.writeText('FloatingDream1001的站内分享\n标题：' + subTitle + '\n链接：' + url + '\n欢迎来访！🍭🍭🍭');        new Vue({            data: function () {                this.$notify({                    title: "成功复制分享信息🎉",                    message: "您现在可以通过粘贴直接跟小伙伴分享了！",                    position: 'top-left',                    offset: 50,                    showClose: true,                    type: "success",                     duration: 5000                });                // return { visible: false }            }        })    } catch (err) {        console.error('复制失败！', err);    }    // new ClipboardJS(".share", { text: function () { return '标题：' + document.title + '\n链接：' + url } });    // btf.snackbarShow("本页链接已复制到剪切板，快去分享吧~")}// 防抖function share() {    debounce(share_, 300);}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>photo</title>
      <link href="/photo/index.html"/>
      <url>/photo/index.html</url>
      
        <content type="html"><![CDATA[<div class="fj-gallery"><p><img src="https://source.fomal.cc/img/default_cover_1.webp" alt="p1"><br><img src="https://source.fomal.cc/img/default_cover_2.webp" alt="p2"><br><img src="https://source.fomal.cc/img/default_cover_3.webp" alt="p3"><br><img src="https://source.fomal.cc/img/default_cover_4.webp" alt="p4"><br><img src="https://source.fomal.cc/img/default_cover_5.webp" alt="p5"><br><img src="https://source.fomal.cc/img/default_cover_6.webp" alt="p6"><br><img src="https://source.fomal.cc/img/default_cover_7.webp" alt="p7"><br><img src="https://source.fomal.cc/img/default_cover_8.webp" alt="p8"><br><img src="https://source.fomal.cc/img/default_cover_9.webp" alt="p9"><br><img src="https://source.fomal.cc/img/default_cover_10.webp" alt="p10"><br><img src="https://source.fomal.cc/img/default_cover_11.webp" alt="p11"><br><img src="https://source.fomal.cc/img/default_cover_12.webp" alt="p12"> </p>          </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<div id="aplayer-oSEOhviA" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="4895239160" data-server="netease" data-type="playlist" data-mode="random" data-autoplay="false" data-listmaxheight="640px" data-preload="auto" data-theme="#e3f2f5" data-volume="0.4" mutex="true"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>恋爱小屋</title>
      <link href="/lovehome/index.html"/>
      <url>/lovehome/index.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="2df7f4a818d5d1a65ffe05a89690c2f0bde120515843d087111747066c6fcc92">24192ee3beba83a9dc0f3becdf4156a2d04de2b66dfb1a95928af5a2c0ce7adb157f421ac6c62dc11a87db94750ac87d7806b1c40b938c9ac2a984ac889b7bac95dd57d71b8d96bc7e2688b9ebda74fdc90efe2b7298f27ae135a9f5c5bc8ac4af080f04c867b2ae5db598bf067f058f43c7524619c50b2f45ad5d92a621709e256f0c33f0f066130a9edd9a49c69b62ff583e39dcaa693ffdccdcb16d8543990baec54761c881b6dadfb94e1b67fa9450acf6ed35b9bf41cd8d38b0354983a1bd8e603a05b8fd4b82b38a5c4a6a5dcf90098ee54b358ff392b3a4773a1b0306a95cda4688fb019e2530d3eecbe1b1e7755047defd487e05775ed24b8d64bef4cb124242f699fb1ea353edc5d0a495a70cc4ef2df1bf4b05d75ff7ed1703c5ede4a4246ad3861a37a155749c887479a74547263fad0adb41e66b7cae97f6b29314acc860ce321084ad0f83060b57468294ddf0cd4d71510301037660c2cea78e72d8784224a96433bd548ff1d8a2a54b1aa1b72d65d572a62be3ec03bbe5442c0a364d3e26944a8e0f0d89e6c7f9561d8f56deb324711e8f5ca7932f89e810f7459edfce94f588c50b687d5b7e0c4babc9be807fa320de68695641ca8c8de4bba1681d8fbcb836081ebdd3275ca4ddd118fbfc0a659f3706e9a419ab4a65cc7f1252d7668109c141899681505fc3629268abf002d14073c2b24532fda14f32e1a04c303528bd84b2f4a14423c1229c5343f7f48012aa7c5cec477dfd7cbae082e9fb7671cce2170ca4ba97cc6df98d6073299d3691127ec20c1304242fe1a3af8eabd89e7523d9a7151a87517c310d790d29b6ded250a49140c4f11a88029efd45e56a93f662d4c3cc64b36254673cd1e0ff36c730ec32c0017a3ffc019cc8ff37eb95805c724d6d15a2c08d872932b331e947adafc61563cbb4532eeb83bbf212ce4f169f7f646170a8872d3fd1e62892ce1a200084ecc2011a2a6aa0b13a42162c1a1dc5910e46bac6edf143a04b153bc77a7a8a0db15c9f40c0c181a89439a9a0b4692e2a628554ac6d94cfc0198035e4044e532d1f909f210a3229f9418594475a99b167360e1c2edc62d81333c221f83184eb8687d53b2a619286202a9351d571b8fd136d5485c12f1a5852e2b88866d9985264f3bc2a9e1a05f0efbc43ecfa148579d71730f4bd529c7fedc10c005163b4d50241c40ccbe795509156be89c6613660d4e6a002349ca362931feb0396361c076540005d71fe6c776d8ef7bd5bc51c6cf446212ddac91cbdfcd5645a52551245d20732b75c55bc11f089e3f8e3d1594e018c05c8d856f10b011e89d305adc20c2483eca6ac8ff11b457e8e49c99ab87b1bf8a70e22666fbcfeb0888617a9f91a7e2cd1b38b557ab96606a1a08bce9dcfe76647dc7f07b86ffbd37107eafe01bceef8c1019e98c460234793fd808138ec071de3dd0d7c8ffccb51b24419e2b724e8d8a01858980f4392afa2</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">这里记录着我和玥玥的快乐时光，需要密码才能进入嗷!!!.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>背景</title>
      <link href="/wallpaper/index.html"/>
      <url>/wallpaper/index.html</url>
      
        <content type="html"><![CDATA[<div class="fj-gallery"><p><img src="https://bgresource.yangyuezz.top/img/index1.webp" alt="p1"><br><img src="https://bgresource.yangyuezz.top/img/index2.webp" alt="p2"><br><img src="https://bgresource.yangyuezz.top/img/index3.webp" alt="p3"><br><img src="https://bgresource.yangyuezz.top/img/index4.webp" alt="p4"><br><img src="https://bgresource.yangyuezz.top/img/index5.webp" alt="p5"><br><img src="https://bgresource.yangyuezz.top/img/index6.webp" alt="p6"><br><img src="https://bgresource.yangyuezz.top/img/index7.webp" alt="p7"><br><img src="https://bgresource.yangyuezz.top/img/index8.webp" alt="p8"><br><img src="https://bgresource.yangyuezz.top/img/index9.webp" alt="p9"><br><img src="https://bgresource.yangyuezz.top/img/index10.webp" alt="p10"><br><img src="https://bgresource.yangyuezz.top/img/index11.webp" alt="p11"><br><img src="https://bgresource.yangyuezz.top/img/index12.webp" alt="p12"><br><img src="https://bgresource.yangyuezz.top/img/index13.webp" alt="p13"><br><img src="https://bgresource.yangyuezz.top/img/index14.webp" alt="p14"><br><img src="https://bgresource.yangyuezz.top/img/index15.webp" alt="p15"><br><img src="https://bgresource.yangyuezz.top/img/index16.webp" alt="p16"><br><img src="https://bgresource.yangyuezz.top/img/index17.webp" alt="p17"><br><img src="https://bgresource.yangyuezz.top/img/index18.webp" alt="p18"><br><img src="https://bgresource.yangyuezz.top/img/index19.webp" alt="p19"><br><img src="https://bgresource.yangyuezz.top/img/index20.webp" alt="p20"></p>          </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Web统计</title>
      <link href="/webgit/index.html"/>
      <url>/webgit/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
